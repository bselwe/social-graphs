{"version":3,"sources":["App.module.css","components/ArtistsByGenres/styles.module.css","components/RelatedArtists/styles.module.css","components/DataSets/styles.module.css","components/Introduction/styles.module.css","components/TFTR/styles.module.css","components/Title/styles.module.css","components/Artists/styles.module.css","helpers/normalize.ts","helpers/genres.ts","components/ArtistsByGenres/index.tsx","components/TFTR/index.tsx","components/Link.tsx","components/DataSets/index.tsx","components/Introduction/index.tsx","media/pop.svg","media/rap.png","components/RelatedArtists/index.tsx","components/Title/index.tsx","helpers/joinClasses.ts","components/Artists/popularities.svg","components/Artists/genres.svg","components/Artists/degree_distribution.svg","components/Artists/degree_distribution_log_log.svg","components/Artists/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","normalize","value","min","max","Genre","allGenres","Chillhop","ContemporaryCountry","Broadway","DancePop","AnthemWorship","EmoRap","AlbumRock","Hollywood","BigRoom","AlternativeRB","genreColor","ArtistsByGenres","ComparedGenres","graph","useMemo","nodes","dataNodes","map","node","index","artistId","dataPositions","x","y","size","dataNodeSize","color","id","label","dataArtists","name","edges","dataEdges","edge","from","to","attributes","dataEdgeColor","source","target","genre","generateArtistsByGenresNetwork","artistsConnections","reduce","result","sourceArtist","targetArtist","push","useState","selectedArtist","setSelectedArtist","selectedArtistConnections","className","styles","container","renderer","settings","clone","defaultLabelSize","zoomMin","style","flex","height","backgroundColor","onOverNode","data","initialSize","popularity","followers","total","genres","join","length","slice","artist","legend","legendGenre","legendGenreColor","Link","url","children","display","href","DataSets","loadFromFile","Introduction","displayComparedGenres","PopVsRap","src","pop","alt","rap","RhythmAndBluesVsRock","r_and_b","rock","PopVsJazz","jazz","TF_TR","comparedGenres","setComparedGenres","onClick","undefined","RelatedArtists","dataNodeColor","generateRelatedArtistsNetwork","Title","joinCls","classes","filter","c","Artists","popularities","width","degreeDistribution","degreeDistributionLogLog","App","app","introduction","section","TFTR","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77a548c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"introduction\":\"App_introduction__1Jmpc\",\"section\":\"App_section__1OL6S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2kpeh\",\"selectedArtist\":\"styles_selectedArtist__3OYiY\",\"legend\":\"styles_legend__5bEjw\",\"legendGenre\":\"styles_legendGenre__7wpKn\",\"legendGenreColor\":\"styles_legendGenreColor__CxEmy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3ZDPL\",\"selectedArtist\":\"styles_selectedArtist__w11q6\",\"legend\":\"styles_legend__ogw0p\",\"legendGenre\":\"styles_legendGenre__e4hzW\",\"legendGenreColor\":\"styles_legendGenreColor__QKduS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2JKN2\",\"link\":\"styles_link__ENEmF\",\"loadFromFile\":\"styles_loadFromFile__O3EcU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container___SrVZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__XqS9v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1PuJX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__sJfDG\"};","export function normalize(value: number, min: number, max: number) {\n  return (value - min) / (max - min);\n}\n","export enum Genre {\n  Chillhop = \"chillhop\",\n  ContemporaryCountry = \"contemporary country\",\n  Broadway = \"broadway\",\n  DancePop = \"dance pop\",\n  AnthemWorship = \"anthem worship\",\n  EmoRap = \"emo rap\",\n  AlbumRock = \"album rock\",\n  Hollywood = \"hollywood\",\n  BigRoom = \"big room\",\n  AlternativeRB = \"alternative r&b\",\n}\n\nexport const allGenres = [\n  Genre.Chillhop,\n  Genre.ContemporaryCountry,\n  Genre.Broadway,\n  Genre.DancePop,\n  Genre.AnthemWorship,\n  Genre.EmoRap,\n  Genre.AlbumRock,\n  Genre.Hollywood,\n  Genre.BigRoom,\n  Genre.AlternativeRB,\n];\n\nexport const genreColor: { [genre in Genre]: string } = {\n  [Genre.Chillhop]: \"#fff100\",\n  [Genre.ContemporaryCountry]: \"#ff8c00\",\n  [Genre.Broadway]: \"#e81123\",\n  [Genre.DancePop]: \"#ec008c\",\n  [Genre.AnthemWorship]: \"#68217a\",\n  [Genre.EmoRap]: \"#00188f\",\n  [Genre.AlbumRock]: \"#00bcf2\",\n  [Genre.Hollywood]: \"#00b294\",\n  [Genre.BigRoom]: \"#009e49\",\n  [Genre.AlternativeRB]: \"#bad80a\",\n};\n","import React, { useMemo, useState } from \"react\";\nimport {\n  Sigma,\n  SigmaGraph,\n  RelativeSize,\n  SigmaNode,\n  SigmaEdge,\n} from \"react-sigma\";\nimport { normalize } from \"../../helpers/normalize\";\nimport styles from \"./styles.module.css\";\n\nimport dataArtists from \"../../data/ArtistsByGenres/artists.json\";\nimport dataNodes from \"../../data/ArtistsByGenres/nodes.json\";\nimport dataEdges from \"../../data/ArtistsByGenres/edges.json\";\nimport dataPositions from \"../../data/ArtistsByGenres/positions.json\";\nimport dataNodeSize from \"../../data/ArtistsByGenres/node_size.json\";\nimport dataEdgeColor from \"../../data/ArtistsByGenres/edge_color.json\";\nimport { allGenres, Genre, genreColor } from \"../../helpers/genres\";\n\nconst maxArtistsConnectionsToShow = 20;\n\ninterface Artist {\n  readonly id: string;\n  readonly name: string;\n  readonly popularity: number;\n  readonly followers: { total: number };\n  readonly genres: string[];\n}\n\nconst ArtistsByGenres: React.FC = () => {\n  const graph = useMemo(() => generateArtistsByGenresNetwork(), []);\n\n  const artistsConnections = useMemo(() => {\n    return graph.edges.reduce((result, edge) => {\n      if (!(edge.source in result)) result[edge.source] = [];\n      if (!(edge.target in result)) result[edge.target] = [];\n\n      const sourceArtist = dataArtists[\n        edge.source as keyof typeof dataArtists\n      ] as Artist;\n      const targetArtist = dataArtists[\n        edge.target as keyof typeof dataArtists\n      ] as Artist;\n\n      result[edge.source].push({\n        name: targetArtist.name,\n        genre: edge.label as Genre,\n      });\n      result[edge.target].push({\n        name: sourceArtist.name,\n        genre: edge.label as Genre,\n      });\n\n      return result;\n    }, {} as { [artistId: string]: { name: string; genre: Genre }[] });\n  }, [graph]);\n\n  const [selectedArtist, setSelectedArtist] = useState<Artist>();\n\n  const selectedArtistConnections =\n    selectedArtist && artistsConnections[selectedArtist.id];\n\n  const onArtistHover = (result: { data: { node: SigmaNode } }) => {\n    setSelectedArtist(\n      dataArtists[result.data.node.id as keyof typeof dataArtists]\n    );\n  };\n\n  return (\n    <div className={styles.container}>\n      <Sigma\n        graph={graph}\n        renderer=\"canvas\"\n        settings={{\n          clone: false,\n          defaultLabelSize: 10,\n          zoomMin: 0.03,\n        }}\n        style={{\n          flex: 1,\n          height: \"80vh\",\n          backgroundColor: \"white\",\n        }}\n        onOverNode={onArtistHover}\n      >\n        <RelativeSize initialSize={8} />\n      </Sigma>\n\n      <div className={styles.selectedArtist}>\n        {selectedArtist && selectedArtistConnections ? (\n          <>\n            <p>\n              <b>Name</b>: {selectedArtist.name}\n            </p>\n            <p>\n              <b>Popularity</b>: {selectedArtist.popularity}\n            </p>\n            <p>\n              <b>Followers</b>: {selectedArtist.followers.total}\n            </p>\n            <p>\n              <b>Genres</b>: {selectedArtist.genres.join(\", \")}\n            </p>\n            <p>\n              <b>Connected with ({selectedArtistConnections.length})</b>:{\" \"}\n              {selectedArtistConnections\n                .slice(0, maxArtistsConnectionsToShow)\n                .map((artist) => (\n                  <span\n                    key={artist.name}\n                    style={{ color: genreColor[artist.genre] }}\n                  >\n                    {artist.name}\n                    {\"; \"}\n                  </span>\n                ))}{\" \"}\n              {selectedArtistConnections.length - maxArtistsConnectionsToShow >\n                0 && (\n                <span>{`and ${\n                  selectedArtistConnections.length - maxArtistsConnectionsToShow\n                } more`}</span>\n              )}\n            </p>\n          </>\n        ) : (\n          <p>Hover over the artist to see details</p>\n        )}\n      </div>\n\n      <div className={styles.legend}>\n        {allGenres.map((genre) => (\n          <div key={genre} className={styles.legendGenre}>\n            <div\n              className={styles.legendGenreColor}\n              style={{ backgroundColor: genreColor[genre] }}\n            />\n            <p>{genre}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction generateArtistsByGenresNetwork(): SigmaGraph {\n  const nodes = dataNodes.map((node, index) => {\n    const artistId = node[0];\n\n    const [x, y] = dataPositions[artistId as keyof typeof dataPositions] as [\n      number,\n      number\n    ];\n\n    const size = normalize(dataNodeSize[index], 1, 4);\n\n    const color = \"rgba(30, 118, 176, 0.6)\";\n\n    return {\n      id: artistId as keyof typeof dataPositions,\n      label: (dataArtists[artistId as keyof typeof dataArtists] as Artist).name,\n      x,\n      y,\n      size,\n      color,\n    };\n  });\n\n  const edges = (dataEdges as any).map(\n    (\n      edge: [from: number, to: number, attributes: { genre: string }],\n      index: number\n    ) => {\n      const from = edge[0];\n      const to = edge[1];\n      const attributes = edge[2];\n\n      const color = dataEdgeColor[index];\n\n      return {\n        id: `${from}-${to}`,\n        source: from,\n        target: to,\n        label: attributes.genre,\n        color,\n      };\n    }\n  );\n\n  return {\n    nodes,\n    edges,\n  };\n}\n\nexport default ArtistsByGenres;\n","import React, { useState } from \"react\";\nimport styles from \"./styles.module.css\";\n\n//import pop from \"../../media/pop.svg\";\nimport pop from \"../../media/pop.svg\";\nimport rap from \"../../media/rap.png\";\nimport r_and_b from \"../../media/pop.svg\"\nimport rock from \"../../media/pop.svg\"\nimport jazz from \"../../media/pop.svg\"\n\nenum ComparedGenres {\n  PopVsRap,\n  RhythmAndBluesVsRock,\n  PopVsJazz,\n}\n\nconst TF_TR: React.FC = () => {\n  const [comparedGenres, setComparedGenres] = useState<ComparedGenres>(\n    ComparedGenres.PopVsRap\n  );\n\n  return (\n    <div className={styles.container}>\n      <p>Please select a pair of genres</p>\n\n      <button onClick={() => setComparedGenres(ComparedGenres.PopVsRap)}>\n        Pop vs Rap\n      </button>\n      <button onClick={() => setComparedGenres(ComparedGenres.RhythmAndBluesVsRock)}>\n        Rhythm and Blues vs Rock\n      </button>\n      <button onClick={() => setComparedGenres(ComparedGenres.PopVsJazz)}>\n        Pop vs Jazz\n      </button>\n\n      {comparedGenres !== undefined\n        ? displayComparedGenres(comparedGenres)\n        : null}\n    </div>\n  );\n};\n\nfunction displayComparedGenres(genres: ComparedGenres) {\n  switch (genres) {\n    case ComparedGenres.PopVsRap:\n      return (\n        <div>\n          <img src={pop} alt=\"pop\" />\n          <img src={rap} alt=\"rap\" />\n        </div>\n      );\n    case ComparedGenres.RhythmAndBluesVsRock:\n      return (\n        <div>\n          <img src={r_and_b} alt=\"rhythm and blues\" />\n          <img src={rock} alt=\"rock\" />\n        </div>\n      );\n    case ComparedGenres.PopVsJazz:\n      return (\n        <div>\n          <img src={pop} alt=\"pop\" />\n          <img src={jazz} alt=\"jazz\" />\n        </div>\n      );\n    default:\n      return <div>Empty</div>;\n  }\n}\n\nexport default TF_TR;\n","import React from \"react\";\n\ninterface LinkProps {\n  readonly url: string;\n}\n\nconst Link: React.FC<LinkProps> = ({ url, children }) => (\n  <a\n    style={{ display: \"inline-block\", color: \"#1db954\" }}\n    target={\"blank\"}\n    href={url}\n  >\n    {children}\n  </a>\n);\n\nexport default Link;\n","import React from \"react\";\nimport Link from \"../Link\";\nimport styles from \"./styles.module.css\";\n\nconst DataSets: React.FC = () => {\n  return (\n    <div className={styles.container}>\n      <p>\n        {\n          \"All data sets used in the assignment (lyrics, artists, tracks) are publicly available \"\n        }\n        <Link\n          url={\n            \"https://drive.google.com/drive/folders/1-PHHKAzZT6lU-O9BFSg-M3jGVlRGWi8o\"\n          }\n        >\n          here\n        </Link>\n        {\".\"}\n      </p>\n      <p>\n        {\"The data was serialized using \"}\n        <Link url=\"https://docs.python.org/3/library/pickle.html\">\n          {\"pickle\"}\n        </Link>\n        {\" library. In order to load the data from Python use:\"}\n      </p>\n      <div className={styles.loadFromFile}>\n        <code>\n          {`def load_from_file(file_name):`}\n          <br />\n          &emsp;{`with open(file_name, \"rb\") as file:`}\n          <br />\n          &emsp;&emsp;{`    return pickle.load(file)`}\n        </code>\n      </div>\n    </div>\n  );\n};\n\nexport default DataSets;\n","import React from \"react\";\nimport styles from \"./styles.module.css\";\n\nconst Introduction: React.FC = () => {\n  return (\n    <div className={styles.container}>\n      <p>\n        The sample data used during computation is a subset of all artists and\n        lyrics accessable through the Spotify and Genius API.\n      </p>\n      <p>\n        <b>Following datasets have been constructed and used:</b> <br />\n        <ol>\n          <li>\n            An artist JSON file containing all artists <i>(34663 in total)</i>{\" \"}\n            and associated attributes: id, name, spotify popularity, followers\n            and genres.\n          </li>\n          <li>\n            Lyric files <i>(33977 in total)</i> each contain a list of songs and\n            each lyric file is named by the Spotify Artist ID of the owning\n            artist.\n          </li>\n        </ol>\n      </p>\n    </div>\n  );\n};\n\nexport default Introduction;\n","export default __webpack_public_path__ + \"static/media/pop.7a6e5773.svg\";","export default __webpack_public_path__ + \"static/media/rap.e10c8c8e.png\";","import React, { useMemo, useState } from \"react\";\nimport {\n  Sigma,\n  SigmaGraph,\n  RelativeSize,\n  SigmaNode,\n  SigmaEdge,\n} from \"react-sigma\";\nimport { normalize } from \"../../helpers/normalize\";\nimport styles from \"./styles.module.css\";\n\nimport dataArtists from \"../../data/ArtistsByGenres/artists.json\";\nimport dataNodes from \"../../data/RelatedArtists/nodes.json\";\nimport dataEdges from \"../../data/RelatedArtists/edges.json\";\nimport dataPositions from \"../../data/RelatedArtists/positions.json\";\nimport dataNodeSize from \"../../data/RelatedArtists/node_size.json\";\nimport dataNodeColor from \"../../data/RelatedArtists/node_color.json\";\nimport { allGenres, Genre, genreColor } from \"../../helpers/genres\";\n\nconst maxArtistsConnectionsToShow = 20;\n\ninterface Artist {\n  readonly id: string;\n  readonly name: string;\n  readonly popularity: number;\n  readonly followers: { total: number };\n  readonly genres: string[];\n}\n\nconst RelatedArtists: React.FC = () => {\n  const graph = useMemo(() => generateRelatedArtistsNetwork(), []);\n\n  const artistsConnections = useMemo(() => {\n    return graph.edges.reduce((result, edge) => {\n      if (!(edge.source in result)) result[edge.source] = [];\n      if (!(edge.target in result)) result[edge.target] = [];\n\n      const sourceArtist = dataArtists[\n        edge.source as keyof typeof dataArtists\n      ] as Artist;\n      const targetArtist = dataArtists[\n        edge.target as keyof typeof dataArtists\n      ] as Artist;\n\n      result[edge.source].push({\n        name: targetArtist.name,\n        genre: edge.label as Genre,\n      });\n      result[edge.target].push({\n        name: sourceArtist.name,\n        genre: edge.label as Genre,\n      });\n\n      return result;\n    }, {} as { [artistId: string]: { name: string; genre: Genre }[] });\n  }, [graph]);\n\n  const [selectedArtist, setSelectedArtist] = useState<Artist>();\n\n  const selectedArtistConnections =\n    selectedArtist && artistsConnections[selectedArtist.id];\n\n  const onArtistHover = (result: { data: { node: SigmaNode } }) => {\n    setSelectedArtist(\n      dataArtists[result.data.node.id as keyof typeof dataArtists]\n    );\n  };\n\n  return (\n    <div className={styles.container}>\n      <Sigma\n        graph={graph}\n        renderer=\"canvas\"\n        settings={{\n          clone: false,\n          defaultLabelSize: 10,\n          zoomMin: 0.03,\n        }}\n        style={{\n          flex: 1,\n          height: \"80vh\",\n          backgroundColor: \"white\",\n        }}\n        onOverNode={onArtistHover}\n      >\n        <RelativeSize initialSize={8} />\n      </Sigma>\n\n      <div className={styles.selectedArtist}>\n        {selectedArtist && selectedArtistConnections ? (\n          <>\n            <p>\n              <b>Name</b>: {selectedArtist.name}\n            </p>\n            <p>\n              <b>Popularity</b>: {selectedArtist.popularity}\n            </p>\n            <p>\n              <b>Followers</b>: {selectedArtist.followers.total}\n            </p>\n            <p>\n              <b>Genres</b>: {selectedArtist.genres.join(\", \")}\n            </p>\n            <p>\n              <b>Connected with ({selectedArtistConnections.length})</b>:{\" \"}\n              {selectedArtistConnections\n                .slice(0, maxArtistsConnectionsToShow)\n                .map((artist) => (\n                  <span\n                    key={artist.name}\n                    style={{ color: genreColor[artist.genre] }}\n                  >\n                    {artist.name}\n                    {\"; \"}\n                  </span>\n                ))}{\" \"}\n              {selectedArtistConnections.length - maxArtistsConnectionsToShow >\n                0 && (\n                <span>{`and ${\n                  selectedArtistConnections.length - maxArtistsConnectionsToShow\n                } more`}</span>\n              )}\n            </p>\n          </>\n        ) : (\n          <p>Hover over the artist to see details</p>\n        )}\n      </div>\n\n      <div className={styles.legend}>\n        {allGenres.map((genre) => (\n          <div key={genre} className={styles.legendGenre}>\n            <div\n              className={styles.legendGenreColor}\n              style={{ backgroundColor: genreColor[genre] }}\n            />\n            <p>{genre}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction generateRelatedArtistsNetwork(): SigmaGraph {\n  const nodes = dataNodes.map((node, index) => {\n    const artistId = node[0];\n\n    const [x, y] = dataPositions[artistId as keyof typeof dataPositions] as [\n      number,\n      number\n    ];\n\n    const size = normalize(dataNodeSize[index], 1, 4);\n\n    const color = dataNodeColor[index];\n\n    return {\n      id: artistId as keyof typeof dataPositions,\n      label: (dataArtists[artistId as keyof typeof dataArtists] as Artist).name,\n      x,\n      y,\n      size,\n      color,\n    };\n  });\n\n  const edges = (dataEdges as any).map(\n    (\n      edge: [from: number, to: number, attributes: { genre: string }],\n      index: number\n    ) => {\n      const from = edge[0];\n      const to = edge[1];\n      const attributes = edge[2];\n\n      const color = \"rgba(0,0,0, 0.1)\";\n      \n      return {\n        id: `${from}-${to}`,\n        source: from,\n        target: to,\n        label: attributes.genre,\n        color,\n      };\n    }\n  );\n\n  return {\n    nodes,\n    edges,\n  };\n}\n\nexport default RelatedArtists;\n","import React from \"react\";\nimport styles from \"./styles.module.css\";\n\ninterface TitleProps {\n  readonly children: React.ReactNode;\n}\n\nconst Title: React.FC<TitleProps> = ({ children }) => {\n  return <div className={styles.container}>{children}</div>;\n};\n\nexport default Title;\n","type FalsyStyle = null | undefined | false | \"\";\n\nexport default function joinCls(...classes: (string | FalsyStyle)[]) {\n  return classes.filter((c) => c).join(\" \");\n}\n","export default __webpack_public_path__ + \"static/media/popularities.9aa7fcb1.svg\";","export default __webpack_public_path__ + \"static/media/genres.1fcf5092.svg\";","export default __webpack_public_path__ + \"static/media/degree_distribution.94015bc7.svg\";","export default __webpack_public_path__ + \"static/media/degree_distribution_log_log.e6af7c9f.svg\";","import React from \"react\";\nimport styles from \"./styles.module.css\";\n\nimport popularities from \"./popularities.svg\";\nimport genres from \"./genres.svg\";\nimport degreeDistribution from \"./degree_distribution.svg\";\nimport degreeDistributionLogLog from \"./degree_distribution_log_log.svg\";\n\nconst Artists: React.FC = () => {\n  return (\n    <div className={styles.container}>\n      <p>Introduce artists data set</p>\n      <img src={popularities} width={800} alt={\"popularities\"} />\n      <img src={genres} width={800} alt={\"genres\"} />\n      <img src={degreeDistribution} width={1200} alt={\"degree distribution\"} />\n      <img\n        src={degreeDistributionLogLog}\n        width={800}\n        alt={\"degree distribution (log log)\"}\n      />\n    </div>\n  );\n};\n\nexport default Artists;\n","import React from \"react\";\nimport styles from \"./App.module.css\";\nimport ArtistsByGenres from \"./components/ArtistsByGenres\";\nimport DataSets from \"./components/DataSets\";\nimport Introduction from \"./components/Introduction\";\nimport TFTR from \"./components/TFTR\";\nimport RelatedArtists from \"./components/RelatedArtists\";\nimport Title from \"./components/Title\";\nimport joinCls from \"./helpers/joinClasses\";\nimport Artists from \"./components/Artists\";\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <h1>Social Graphs</h1>\n      <h3>Assignment 2</h3>\n      <ul>\n        <li>Nicolae Popovici</li>\n        <li>Benjamin Starostka</li>\n        <li>Bartosz Selwesiuk</li>\n      </ul>\n\n      <div className={joinCls(styles.introduction, styles.section)}>\n        <Title>Introduction</Title>\n        <Introduction />\n      </div>\n\n      <div className={styles.section}>\n        <Title>Artists</Title>\n        <Artists />\n      </div>\n\n      <div className={styles.section}>\n        <Title>Artists network based on genres</Title>\n        <ArtistsByGenres />\n      </div>\n\n      <div className={styles.section}>\n        <Title>Related artists network</Title>\n        <RelatedArtists />\n      </div>\n\n      <div className={styles.section}>\n        <Title>TF-TR</Title>\n        <TFTR />\n      </div>\n\n      <div className={styles.section}>\n        <Title>Download data sets</Title>\n        <DataSets />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}