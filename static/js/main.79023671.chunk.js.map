{"version":3,"sources":["components/ArtistsByGenres.tsx","App.tsx","reportWebVitals.ts","index.tsx","App.module.css"],"names":["ArtistsByGenres","graph","nodes","dataNodes","map","node","artistId","dataPositions","id","label","x","y","edges","dataEdges","edge","from","to","attributes","source","target","genre","generateArtistsByGenresNetwork","renderer","settings","clone","batchEdgesDrawing","style","flex","height","backgroundColor","initialSize","App","className","styles","app","artistsByGenres","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"s3ppJA2EeA,MA5DmB,WAChC,IAAMC,EA4BR,WACE,IAAMC,EAAQC,EAAUC,KAAI,SAACC,GAC3B,IAAMC,EAAWD,EAAK,GADc,EAErBE,EAAcD,GAFO,mBAGpC,MAAO,CACLE,GAAIF,EACJG,MAAOH,EACPI,EANkC,KAOlCC,EAPkC,SAWhCC,EAASC,EAAkBT,KAAI,SAACU,GACpC,IAAMC,EAAOD,EAAK,GACZE,EAAKF,EAAK,GACVG,EAAaH,EAAK,GAExB,MAAO,CACLN,GAAG,GAAD,OAAKO,EAAL,YAAaC,GACfE,OAAQH,EACRI,OAAQH,EACRP,MAAOQ,EAAWG,UAItB,MAAO,CACLlB,QACAU,SAvDYS,GAEd,OACE,cAAC,IAAD,CACEpB,MAAOA,EACPqB,SAAS,QACTC,SAAU,CACRC,OAAO,EACPC,mBAAmB,GAErBC,MAAO,CACLC,KAAM,EACNC,OAAQ,QACRC,gBAAiB,SAVrB,SAoBE,cAAC,IAAD,CAAcC,YAAa,OCjBlBC,MAlBf,WACE,OACE,sBAAKC,UAAWC,IAAOC,IAAvB,UACE,+CACA,8CACA,+BACE,kDACA,oDACA,sDAGF,qBAAKF,UAAWC,IAAOE,gBAAvB,SACE,cAAC,EAAD,UCFOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,IAAM,iBAAiB,gBAAkB,+B","file":"static/js/main.79023671.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Sigma,\n  ForceAtlas2,\n  SigmaGraph,\n  EdgeShapes,\n  NodeShapes,\n  RandomizeNodePositions,\n  RelativeSize,\n} from \"react-sigma\";\n\nimport dataNodes from \"../data/ArtistsByGenres/nodes.json\";\nimport dataEdges from \"../data/ArtistsByGenres/edges.json\";\nimport dataPositions from \"../data/ArtistsByGenres/positions.json\";\n\nconst ArtistsByGenres: React.FC = () => {\n  const graph = generateArtistsByGenresNetwork();\n\n  return (\n    <Sigma\n      graph={graph}\n      renderer=\"webgl\"\n      settings={{\n        clone: false,\n        batchEdgesDrawing: true,\n      }}\n      style={{\n        flex: 1,\n        height: \"800px\",\n        backgroundColor: \"white\",\n      }}\n    >\n      {/* <ForceAtlas2\n        iterationsPerRender={1}\n        barnesHutOptimize\n        barnesHutTheta={1}\n        timeout={50000}\n        worker\n      /> */}\n      <RelativeSize initialSize={8} />\n    </Sigma>\n  );\n};\n\nfunction generateArtistsByGenresNetwork(): SigmaGraph {\n  const nodes = dataNodes.map((node) => {\n    const artistId = node[0] as keyof typeof dataPositions;\n    const [x, y] = dataPositions[artistId] as [number, number];\n    return {\n      id: artistId,\n      label: artistId,\n      x,\n      y,\n    };\n  });\n\n  const edges = (dataEdges as any).map((edge: any) => {\n    const from = edge[0];\n    const to = edge[1];\n    const attributes = edge[2] as { genre: string };\n\n    return {\n      id: `${from}-${to}`,\n      source: from,\n      target: to,\n      label: attributes.genre,\n    };\n  });\n\n  return {\n    nodes,\n    edges,\n  };\n}\n\nexport default ArtistsByGenres;\n","import React from \"react\";\nimport styles from \"./App.module.css\";\nimport ArtistsByGenres from \"./components/ArtistsByGenres\";\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <h1>Social Graphs</h1>\n      <h3>Assignment 2</h3>\n      <ul>\n        <li>Nicolae Popovici</li>\n        <li>Benjamin Starostka</li>\n        <li>Bartosz Selwesiuk</li>\n      </ul>\n\n      <div className={styles.artistsByGenres}>\n        <ArtistsByGenres />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"artistsByGenres\":\"App_artistsByGenres__1F2l2\"};"],"sourceRoot":""}