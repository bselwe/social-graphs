{"version":3,"sources":["components/ArtistsByGenres/styles.module.css","App.module.css","components/Sentiments/styles.module.css","components/TFTR/styles.module.css","components/RelatedArtists/styles.module.css","components/ArtistsByGenres/topConnected.styles.module.css","components/DataSets/styles.module.css","components/Artists/styles.module.css","components/Introduction/styles.module.css","components/Title/styles.module.css","helpers/normalize.ts","interfaces/genres.ts","components/ArtistsByGenres/degree_distribution.svg","components/ArtistsByGenres/degree_distribution_log_log.svg","data/genres.ts","data/ArtistsByGenres/top.ts","components/Link.tsx","data/artists.ts","components/ArtistsByGenres/TopConnected.tsx","components/ArtistsByGenres/index.tsx","components/TFTR/index.tsx","components/DataSets/index.tsx","components/Introduction/index.tsx","media/pop_rap.svg","media/pop_jazz.svg","media/rap.svg","media/r&b.svg","media/rock.svg","media/jazz.svg","components/RelatedArtists/index.tsx","components/Title/index.tsx","helpers/joinClasses.ts","data/Sentiment/index.ts","components/Artists/popularities_normal.svg","components/Artists/genres.svg","components/Artists/index.tsx","components/Sentiments/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","normalize","value","min","max","Genre","allGenres","Chillhop","ContemporaryCountry","Broadway","DancePop","AnthemWorship","EmoRap","AlbumRock","Hollywood","BigRoom","AlternativeRB","genreColor","genreConnections","mostConnectedArtists","id","name","connections","image","leastConnectedArtists","Link","url","color","children","style","display","target","href","getArtistById","dataArtists","maxArtistsConnectionsToShow","TopConnected","artists","artistsConnections","className","styles","topConnectedArtists","map","artist","topConnectedArtist","src","alt","genres","join","length","slice","genre","ArtistsByGenres","ComparedGenres","graph","useMemo","nodes","dataNodes","node","index","artistId","dataPositions","x","y","size","dataNodeSize","label","edges","dataEdges","edge","from","to","attributes","dataEdgeColor","source","generateArtistsByGenresNetwork","reduce","result","sourceArtist","targetArtist","push","useState","selectedArtist","setSelectedArtist","selectedArtistConnections","container","topGenres","topGenre","topGenreColor","backgroundColor","content","renderer","settings","clone","defaultLabelSize","zoomMin","flex","height","onOverNode","data","initialSize","popularity","followers","total","legend","legendGenre","legendGenreColor","spaceSmall","space","degreeDistribution","width","degreeDistributionLogLog","marginTop","DataSets","loadFromFile","Introduction","displayComparedGenres","PopVsRap","images","pop_rap","rap","RhythmAndBluesVsRock","r_and_b","rock","PopVsJazz","pop_jazz","jazz","TF_TR","comparedGenres","setComparedGenres","btn_green","onClick","btn_red","btn_blue","undefined","RelatedArtists","dataNodeColor","generateRelatedArtistsNetwork","Title","joinCls","classes","filter","c","SelectedGenre","Artists","artistAttributes","popularities","marginBottom","Sentiments","text","setText","Pop","selectedGenre","setSelectedGenre","allArtists","sentimentsPop","sentimentsRap","happiness_average","filteredArtists","toLowerCase","includes","btn_white","Rap","marginRight","type","onChange","e","placeholder","artistsList","App","app","introduction","section","TFTR","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6a59fd2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2kpeh\",\"content\":\"styles_content__1FBQW\",\"selectedArtist\":\"styles_selectedArtist__3OYiY\",\"legend\":\"styles_legend__5bEjw\",\"legendGenre\":\"styles_legendGenre__7wpKn\",\"legendGenreColor\":\"styles_legendGenreColor__CxEmy\",\"topGenre\":\"styles_topGenre__3Np6e\",\"topGenreColor\":\"styles_topGenreColor__2VNk6\",\"spaceSmall\":\"styles_spaceSmall__1wHwe\",\"space\":\"styles_space__2Mrnz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"introduction\":\"App_introduction__1Jmpc\",\"section\":\"App_section__1OL6S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__21osS\",\"content\":\"styles_content__1aiw5\",\"artists\":\"styles_artists__2dQ7A\",\"artistsList\":\"styles_artistsList__1Oq46\",\"selectedArtist\":\"styles_selectedArtist__2yoRe\",\"btn_green\":\"styles_btn_green__1O30G\",\"btn_white\":\"styles_btn_white__XN6Jz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__XqS9v\",\"btn_green\":\"styles_btn_green__3-C-v\",\"btn_red\":\"styles_btn_red__2Lkzq\",\"btn_blue\":\"styles_btn_blue__2gqBg\",\"images\":\"styles_images__30fRr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3ZDPL\",\"selectedArtist\":\"styles_selectedArtist__w11q6\",\"legend\":\"styles_legend__ogw0p\",\"legendGenre\":\"styles_legendGenre__e4hzW\",\"legendGenreColor\":\"styles_legendGenreColor__QKduS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topConnectedArtists\":\"topConnected_styles_topConnectedArtists__1Y_ro\",\"topConnectedArtist\":\"topConnected_styles_topConnectedArtist__-xqCF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2JKN2\",\"link\":\"styles_link__ENEmF\",\"loadFromFile\":\"styles_loadFromFile__O3EcU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__sJfDG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container___SrVZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1PuJX\"};","export function normalize(value: number, min: number, max: number) {\n  return (value - min) / (max - min);\n}\n","export enum Genre {\n  Chillhop = \"chillhop\",\n  ContemporaryCountry = \"contemporary country\",\n  Broadway = \"broadway\",\n  DancePop = \"dance pop\",\n  AnthemWorship = \"anthem worship\",\n  EmoRap = \"emo rap\",\n  AlbumRock = \"album rock\",\n  Hollywood = \"hollywood\",\n  BigRoom = \"big room\",\n  AlternativeRB = \"alternative r&b\",\n}\n","export default __webpack_public_path__ + \"static/media/degree_distribution.8ae2670b.svg\";","export default __webpack_public_path__ + \"static/media/degree_distribution_log_log.e63e2f2a.svg\";","import { Genre } from \"../interfaces/genres\";\n\nexport const allGenres = [\n  Genre.Chillhop,\n  Genre.ContemporaryCountry,\n  Genre.Broadway,\n  Genre.DancePop,\n  Genre.AnthemWorship,\n  Genre.EmoRap,\n  Genre.AlbumRock,\n  Genre.Hollywood,\n  Genre.BigRoom,\n  Genre.AlternativeRB,\n];\n\nexport const genreColor: { [genre in Genre]: string } = {\n  [Genre.Chillhop]: \"#fff100\",\n  [Genre.ContemporaryCountry]: \"#ff8c00\",\n  [Genre.Broadway]: \"#e81123\",\n  [Genre.DancePop]: \"#ec008c\",\n  [Genre.AnthemWorship]: \"#68217a\",\n  [Genre.EmoRap]: \"#00188f\",\n  [Genre.AlbumRock]: \"#00bcf2\",\n  [Genre.Hollywood]: \"#00b294\",\n  [Genre.BigRoom]: \"#009e49\",\n  [Genre.AlternativeRB]: \"#bad80a\",\n};\n\n/**\n * A histogram of genres\n */\nexport const genreConnections: { [genre in Genre]: number } = {\n  [Genre.Chillhop]: 7365,\n  [Genre.ContemporaryCountry]: 6642,\n  [Genre.Broadway]: 4120,\n  [Genre.DancePop]: 2773,\n  [Genre.AnthemWorship]: 2508,\n  [Genre.EmoRap]: 2396,\n  [Genre.AlbumRock]: 1678,\n  [Genre.Hollywood]: 1585,\n  [Genre.BigRoom]: 1420,\n  [Genre.AlternativeRB]: 1322,\n};\n","import { TopConnectedArtist } from \"../../interfaces/artists\";\n\nexport const mostConnectedArtists: TopConnectedArtist[] = [\n  {\n    id: \"1FtS4zSQaKNwJDXcXWX9CD\",\n    name: \"Hazy Year\",\n    connections: 121,\n    image: \"https://i.scdn.co/image/9c6b76d41eb45613cafc45703c2dcf8484b08938\",\n  },\n  {\n    id: \"7D6kLgvRHr6DNDavc0LhvI\",\n    name: \"jhfly\",\n    connections: 121,\n    image: \"https://i.scdn.co/image/c337447708f7f73e9a5326b7deb392a48ceb15c2\",\n  },\n  {\n    id: \"6psQOFgr41pQ2CiL2CCi47\",\n    name: \"fantompower\",\n    connections: 121,\n    image: \"https://i.scdn.co/image/0aa36c79e89edd5194062b06e86e174d8edcd6f0\",\n  },\n  {\n    id: \"6M6LWvHKgBle8SUtSpq6SU\",\n    name: \"iamalex\",\n    connections: 121,\n    image: \"https://i.scdn.co/image/b4de436ebe725194632ee3dba96fea43665b7092\",\n  },\n  {\n    id: \"3nCJkmgdZQ6l8o828Y3vNQ\",\n    name: \"A L E X\",\n    connections: 121,\n    image: \"https://i.scdn.co/image/2bc99a6fe6cdf70154eb3d3b42c5e9705eeb6afd\",\n  },\n];\n\nexport const leastConnectedArtists: TopConnectedArtist[] = [\n  {\n    id: \"0x4xCoWaOFd3WsKarzaxnW\",\n    name: \"Frankie Cosmos\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/af077ddfb6add2219f809e1914b3cc741aacf61a\",\n  },\n  {\n    id: \"5q6z6GTth6lMbL9I8CAgby\",\n    name: \"Anderson East\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/81121623f0097f1d3d8cd919ffee36e25d16a4cf\",\n  },\n  {\n    id: \"7vkiEK5D7Gf0z4M1Va0CXD\",\n    name: \"The Vines\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/49e553864ab27388a3231ac990fa6df0ec7b0b08\",\n  },\n  {\n    id: \"2jw70GZXlAI8QzWeY2bgRc\",\n    name: \"Nelly Furtado\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/0ef9eb29df6c9ed08604e962ddfed709c521f543\",\n  },\n  {\n    id: \"3jTlKw98Ql1jGRPYqhqHap\",\n    name: \"Skindred\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/270b075c6caa04aa7a55659f2ea038e35ab6d5df\",\n  },\n];\n","import React from \"react\";\n\ninterface LinkProps {\n  readonly url: string;\n  readonly color?: string;\n}\n\nconst Link: React.FC<LinkProps> = ({ url, color, children }) => (\n  <a\n    style={{ display: \"inline-block\", color: color ?? \"#1db954\" }}\n    target={\"blank\"}\n    href={url}\n  >\n    {children}\n  </a>\n);\n\nexport default Link;\n","import { Artist } from \"../interfaces/artists\";\nimport dataArtists from \"./artists.json\";\n\nexport function getArtistById(id: string) {\n  return dataArtists[id as keyof typeof dataArtists] as Artist;\n}\n","import React from \"react\";\nimport { Artist, TopConnectedArtist } from \"../../interfaces/artists\";\nimport { Genre } from \"../../interfaces/genres\";\nimport Link from \"../Link\";\nimport styles from \"./topConnected.styles.module.css\";\nimport dataArtists from \"../../data/artists.json\";\nimport { genreColor } from \"../../data/genres\";\nimport { getArtistById } from \"../../data/artists\";\n\ninterface TopConnectedProps {\n  readonly artists: TopConnectedArtist[];\n  readonly artistsConnections: {\n    [artistId: string]: { id: string; name: string; genre: Genre }[];\n  };\n}\n\nconst TopConnected: React.FC<TopConnectedProps> = ({\n  artists,\n  artistsConnections,\n}) => {\n  return (\n    <div className={styles.topConnectedArtists}>\n      {artists.map((artist) => {\n        const connections = artistsConnections[artist.id];\n\n        return (\n          <div\n            key={`topConnected-${artist.id}`}\n            className={styles.topConnectedArtist}\n          >\n            <Link\n              url={`https://open.spotify.com/artist/${artist.id}`}\n              color={\"inherit\"}\n            >\n              <img src={artist.image} alt={artist.name} />\n              <div>{artist.name}</div>\n            </Link>\n            <p>\n              <b>Genres</b>:<br />\n              {getArtistById(artist.id).genres.join(\", \")}\n            </p>\n            <b>Connected with ({connections.length})</b>:<br />\n            {connections.slice(0, maxArtistsConnectionsToShow).map((artist) => (\n              <Link\n                key={artist.name}\n                url={`https://open.spotify.com/artist/${artist.id}`}\n                color={genreColor[artist.genre]}\n              >\n                {`${artist.name};`}&nbsp;\n              </Link>\n            ))}\n            {connections.length - maxArtistsConnectionsToShow > 0 && (\n              <span>{`and ${\n                connections.length - maxArtistsConnectionsToShow\n              } more`}</span>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport const maxArtistsConnectionsToShow = 20;\n\nexport default TopConnected;\n","import React, { useMemo, useState } from \"react\";\nimport { Sigma, SigmaGraph, RelativeSize, SigmaNode } from \"react-sigma\";\nimport { normalize } from \"../../helpers/normalize\";\nimport styles from \"./styles.module.css\";\n\nimport dataNodes from \"../../data/ArtistsByGenres/nodes.json\";\nimport dataEdges from \"../../data/ArtistsByGenres/edges.json\";\nimport dataPositions from \"../../data/ArtistsByGenres/positions.json\";\nimport dataNodeSize from \"../../data/ArtistsByGenres/node_size.json\";\nimport dataEdgeColor from \"../../data/ArtistsByGenres/edge_color.json\";\nimport { Genre } from \"../../interfaces/genres\";\n\nimport degreeDistribution from \"./degree_distribution.svg\";\nimport degreeDistributionLogLog from \"./degree_distribution_log_log.svg\";\nimport { allGenres, genreColor, genreConnections } from \"../../data/genres\";\nimport { Artist } from \"../../interfaces/artists\";\nimport {\n  leastConnectedArtists,\n  mostConnectedArtists,\n} from \"../../data/ArtistsByGenres/top\";\nimport Link from \"../Link\";\nimport TopConnected, { maxArtistsConnectionsToShow } from \"./TopConnected\";\nimport { getArtistById } from \"../../data/artists\";\n\nconst ArtistsByGenres: React.FC = () => {\n  const graph = useMemo(() => generateArtistsByGenresNetwork(), []);\n\n  const artistsConnections = useMemo(() => {\n    return graph.edges.reduce((result, edge) => {\n      if (!(edge.source in result)) result[edge.source] = [];\n      if (!(edge.target in result)) result[edge.target] = [];\n\n      const sourceArtist = getArtistById(edge.source);\n      const targetArtist = getArtistById(edge.target);\n\n      result[edge.source].push({\n        id: targetArtist.id,\n        name: targetArtist.name,\n        genre: edge.label as Genre,\n      });\n      result[edge.target].push({\n        id: sourceArtist.id,\n        name: sourceArtist.name,\n        genre: edge.label as Genre,\n      });\n\n      return result;\n    }, {} as { [artistId: string]: { id: string; name: string; genre: Genre }[] });\n  }, [graph]);\n\n  const [selectedArtist, setSelectedArtist] = useState<Artist>();\n\n  const selectedArtistConnections =\n    selectedArtist && artistsConnections[selectedArtist.id];\n\n  const onArtistHover = (result: { data: { node: SigmaNode } }) => {\n    setSelectedArtist(getArtistById(result.data.node.id));\n  };\n\n  return (\n    <div className={styles.container}>\n      <section>\n        <p>\n          The following section explores how artists are related based on shared\n          genres between them. As introduced before, each artist is associated\n          with a list of genres the artist has produced songs in. The network of\n          artists consists of artists where each pair of artists is connected if\n          the ratio of shared genres is at least 60%. As a result, the edges\n          represent how artists are related based on how many genres they have\n          in common.\n        </p>\n\n        <p>\n          Genres having most connections in the network were found and are\n          presented below. Edges that are colored accordingly to top genres\n          legend represent connections between artists that produce the same top\n          genres.\n        </p>\n\n        <ul className={styles.topGenres}>\n          {allGenres.map((genre, index) => (\n            <li key={`allGenres-${genre}`} className={styles.topGenre}>\n              <span\n                className={styles.topGenreColor}\n                style={{ backgroundColor: genreColor[genre] }}\n              ></span>\n              <p>\n                {index + 1}. {genre} ({genreConnections[genre]} connections)\n              </p>\n            </li>\n          ))}\n        </ul>\n\n        <br />\n\n        <p>\n          The interactive network of artists based on genres is presented below.\n          Hovering over an artist allows to see details about the artist. You\n          may also open the Spotify profile of the artist from the details\n          section.\n        </p>\n      </section>\n\n      <div className={styles.content}>\n        <Sigma\n          graph={graph}\n          renderer=\"canvas\"\n          settings={{\n            clone: false,\n            defaultLabelSize: 10,\n            zoomMin: 0.03,\n          }}\n          style={{\n            flex: 1,\n            height: \"80vh\",\n            backgroundColor: \"white\",\n          }}\n          onOverNode={onArtistHover}\n        >\n          <RelativeSize initialSize={8} />\n        </Sigma>\n\n        <div className={styles.selectedArtist}>\n          {selectedArtist && selectedArtistConnections ? (\n            <>\n              <p>\n                <b>Name</b>:{\" \"}\n                <Link\n                  url={`https://open.spotify.com/artist/${selectedArtist.id}`}\n                  color={\"inherit\"}\n                >\n                  {selectedArtist.name}\n                </Link>\n              </p>\n              <p>\n                <b>Popularity</b>: {selectedArtist.popularity}\n              </p>\n              <p>\n                <b>Followers</b>: {selectedArtist.followers.total}\n              </p>\n              <p>\n                <b>Genres</b>: {selectedArtist.genres.join(\", \")}\n              </p>\n              <p>\n                <b>Connected with ({selectedArtistConnections.length})</b>:{\" \"}\n                {selectedArtistConnections\n                  .slice(0, maxArtistsConnectionsToShow)\n                  .map((artist) => (\n                    <Link\n                      key={artist.name}\n                      url={`https://open.spotify.com/artist/${artist.id}`}\n                      color={genreColor[artist.genre]}\n                    >\n                      {`${artist.name};`}&nbsp;\n                    </Link>\n                  ))}\n                {selectedArtistConnections.length -\n                  maxArtistsConnectionsToShow >\n                  0 && (\n                  <span>{`and ${\n                    selectedArtistConnections.length -\n                    maxArtistsConnectionsToShow\n                  } more`}</span>\n                )}\n              </p>\n            </>\n          ) : (\n            <p>Hover over an artist to see details</p>\n          )}\n        </div>\n\n        <div className={styles.legend}>\n          {allGenres.map((genre) => (\n            <div key={genre} className={styles.legendGenre}>\n              <div\n                className={styles.legendGenreColor}\n                style={{ backgroundColor: genreColor[genre] }}\n              />\n              <p>{genre}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <section>\n        <p>\n          Most and least connected artists in the network were extracted and are\n          presented below. You may press on the artist to view their Spotify\n          profile.\n        </p>\n      </section>\n\n      <div className={styles.spaceSmall} />\n\n      <h3>5 most connected artists</h3>\n\n      <TopConnected\n        artists={mostConnectedArtists}\n        artistsConnections={artistsConnections}\n      />\n\n      <div className={styles.space} />\n\n      <h3>5 least connected artists</h3>\n\n      <TopConnected\n        artists={leastConnectedArtists}\n        artistsConnections={artistsConnections}\n      />\n\n      <div className={styles.space} />\n      <div className={styles.space} />\n\n      <section>\n        <p>\n          Degree distributions for the discussed network are presented below.\n          The left part of the upper plot resembles a part of a Poisson\n          distribution indicating that most nodes have a similar number of\n          connections. On the other side, the right part shows that there exist\n          a few hubs with large number of connections. Looking at log-log plot,\n          it can be observed that the relation between a degree and the number\n          of artists is close to exponential. Overall, it can be said that the\n          network resembles something in-between a scale free and a random\n          network.\n        </p>\n      </section>\n\n      <img src={degreeDistribution} width={1200} alt={\"degree distribution\"} />\n      <img\n        src={degreeDistributionLogLog}\n        width={800}\n        style={{ marginTop: 24 }}\n        alt={\"degree distribution (log log)\"}\n      />\n    </div>\n  );\n};\n\nfunction generateArtistsByGenresNetwork(): SigmaGraph {\n  const nodes = dataNodes.map((node, index) => {\n    const artistId = node[0] as string;\n\n    const [x, y] = dataPositions[artistId as keyof typeof dataPositions] as [\n      number,\n      number\n    ];\n\n    const size = normalize(dataNodeSize[index], 1, 4);\n\n    const color = \"rgba(30, 118, 176, 0.6)\";\n\n    return {\n      id: artistId,\n      label: getArtistById(artistId).name,\n      x,\n      y,\n      size,\n      color,\n    };\n  });\n\n  const edges = (dataEdges as any).map(\n    (\n      edge: [from: number, to: number, attributes: { genre: string }],\n      index: number\n    ) => {\n      const from = edge[0];\n      const to = edge[1];\n      const attributes = edge[2];\n\n      const color = dataEdgeColor[index];\n\n      return {\n        id: `${from}-${to}`,\n        source: from,\n        target: to,\n        label: attributes.genre,\n        color,\n      };\n    }\n  );\n\n  return {\n    nodes,\n    edges,\n  };\n}\n\nexport default ArtistsByGenres;\n","import React, { useState } from \"react\";\nimport styles from \"./styles.module.css\";\n\nimport pop_rap from \"../../media/pop_rap.svg\";\nimport pop_jazz from \"../../media/pop_jazz.svg\";\nimport rap from \"../../media/rap.svg\";\nimport r_and_b from \"../../media/r&b.svg\";\nimport rock from \"../../media/rock.svg\";\nimport jazz from \"../../media/jazz.svg\";\n\nenum ComparedGenres {\n  PopVsRap,\n  RhythmAndBluesVsRock,\n  PopVsJazz,\n}\n\nconst TF_TR: React.FC = () => {\n  const [comparedGenres, setComparedGenres] = useState<ComparedGenres>(\n    ComparedGenres.PopVsRap\n  );\n\n  return (\n    <div className={styles.container}>\n      <section>\n        <p>\n          This section compares a pair of genres. It presents two wordclouds\n          showing words that appear a lot in one genre compared to the other.\n        </p>\n      </section>\n\n      <p>Please select a pair of genres:</p>\n      <button\n        className={styles.btn_green}\n        onClick={() => setComparedGenres(ComparedGenres.PopVsRap)}\n      >\n        Pop vs Rap\n      </button>\n      <button\n        className={styles.btn_red}\n        onClick={() => setComparedGenres(ComparedGenres.RhythmAndBluesVsRock)}\n      >\n        Rhythm and Blues vs Rock\n      </button>\n      <button\n        className={styles.btn_blue}\n        onClick={() => setComparedGenres(ComparedGenres.PopVsJazz)}\n      >\n        Pop vs Jazz\n      </button>\n\n      {comparedGenres !== undefined\n        ? displayComparedGenres(comparedGenres)\n        : null}\n\n      <section>\n        <p>\n          One of the most interesting things to take away from these wordclouds\n          are the difference in vibe the words present. Pop seem to have a very\n          happy vibe, singing a lot about love and happiness. Rap has a very\n          harsh vibe compared to pop, with a lot of swear words being used.\n        </p>\n      </section>\n    </div>\n  );\n};\n\nfunction displayComparedGenres(genres: ComparedGenres) {\n  switch (genres) {\n    case ComparedGenres.PopVsRap:\n      return (\n        <div className={styles.images}>\n          <img src={pop_rap} alt=\"pop\" />\n          <img src={rap} alt=\"rap\" />\n        </div>\n      );\n    case ComparedGenres.RhythmAndBluesVsRock:\n      return (\n        <div className={styles.images}>\n          <img src={r_and_b} alt=\"rhythm and blues\" />\n          <img src={rock} alt=\"rock\" />\n        </div>\n      );\n    case ComparedGenres.PopVsJazz:\n      return (\n        <div className={styles.images}>\n          <img src={pop_jazz} alt=\"pop\" />\n          <img src={jazz} alt=\"jazz\" />\n        </div>\n      );\n  }\n}\n\nexport default TF_TR;\n","import React from \"react\";\nimport Link from \"../Link\";\nimport styles from \"./styles.module.css\";\n\nconst DataSets: React.FC = () => {\n  return (\n    <div className={styles.container}>\n      <p>\n        {\n          \"All data sets used in the assignment (lyrics, artists, tracks) are publicly available \"\n        }\n        <Link\n          url={\n            \"https://drive.google.com/drive/folders/1-PHHKAzZT6lU-O9BFSg-M3jGVlRGWi8o\"\n          }\n        >\n          here\n        </Link>\n        {\".\"}\n      </p>\n      <p>\n        {\"The data was serialized using \"}\n        <Link url=\"https://docs.python.org/3/library/pickle.html\">\n          {\"pickle\"}\n        </Link>\n        {\" library. In order to load the data from Python use:\"}\n      </p>\n      <div className={styles.loadFromFile}>\n        <code>\n          {`def load_from_file(file_name):`}\n          <br />\n          &emsp;{`with open(file_name, \"rb\") as file:`}\n          <br />\n          &emsp;&emsp;{`    return pickle.load(file)`}\n        </code>\n      </div>\n    </div>\n  );\n};\n\nexport default DataSets;\n","import React from \"react\";\nimport styles from \"./styles.module.css\";\n\nconst Introduction: React.FC = () => {\n  return (\n    <div className={styles.container}>\n      <section>\n        <p>\n        The aim of this site is to showcase trends within the music industry. The results presented comes from analysing many music artists from Spotify and lyrics of the music they've produced.\n        </p>\n        <p>Following data sets have been constructed and used:</p>\n        <ol>\n          <li>\n            An artists file containing all artists (34 663 in total), each with\n            associated attributes: id, name, Spotify popularity, followers and\n            genres.\n          </li>\n          <li>\n            A related artists file containing related artists according to\n            Spotify's recommendations.\n          </li>\n          <li>\n            Lyric files (33 977 in total), each containing a list of top 10\n            artist's tracks with associated lyrics. Each lyric file is named by\n            the Spotify artist ID of the owning artist.\n          </li>\n        </ol>\n\n        <p>\n          <i>\n            Note: These data sets can be accessed from the section \"Download\n            data sets\" below.\n          </i>\n        </p>\n\n        <p>\n          The first couple of sections explore how artists are connected based on\n          their genres or related artists. For a more elaborate analysis, beyond\n          the artist attributes, artists tracks' lyrics were used in the\n          sentiment analysis with the purpose of further exploring the\n          connections between artists and how songs may capture personal traits\n          among groups of artists.\n        </p>\n      </section>\n    </div>\n  );\n};\n\nexport default Introduction;\n","export default __webpack_public_path__ + \"static/media/pop_rap.bac5ea9a.svg\";","export default __webpack_public_path__ + \"static/media/pop_jazz.c0522aab.svg\";","export default __webpack_public_path__ + \"static/media/rap.3c48e226.svg\";","export default __webpack_public_path__ + \"static/media/r&b.01a8c62e.svg\";","export default __webpack_public_path__ + \"static/media/rock.7d034d59.svg\";","export default __webpack_public_path__ + \"static/media/jazz.865d40a3.svg\";","import React, { useMemo, useState } from \"react\";\nimport { Sigma, SigmaGraph, RelativeSize, SigmaNode } from \"react-sigma\";\nimport { normalize } from \"../../helpers/normalize\";\nimport styles from \"./styles.module.css\";\n\nimport dataNodes from \"../../data/RelatedArtists/nodes.json\";\nimport dataEdges from \"../../data/RelatedArtists/edges.json\";\nimport dataPositions from \"../../data/RelatedArtists/positions.json\";\nimport dataNodeSize from \"../../data/RelatedArtists/node_size.json\";\nimport dataNodeColor from \"../../data/RelatedArtists/node_color.json\";\nimport { Genre } from \"../../interfaces/genres\";\nimport { allGenres, genreColor } from \"../../data/genres\";\nimport { getArtistById } from \"../../data/artists\";\nimport { maxArtistsConnectionsToShow } from \"../ArtistsByGenres/TopConnected\";\n\ninterface Artist {\n  readonly id: string;\n  readonly name: string;\n  readonly popularity: number;\n  readonly followers: { total: number };\n  readonly genres: string[];\n}\n\nconst RelatedArtists: React.FC = () => {\n  const graph = useMemo(() => generateRelatedArtistsNetwork(), []);\n\n  const artistsConnections = useMemo(() => {\n    return graph.edges.reduce((result, edge) => {\n      if (!(edge.source in result)) result[edge.source] = [];\n      if (!(edge.target in result)) result[edge.target] = [];\n\n      const sourceArtist = getArtistById(edge.source);\n      const targetArtist = getArtistById(edge.target);\n\n      result[edge.source].push({\n        name: targetArtist.name,\n        genre: edge.label as Genre,\n      });\n      result[edge.target].push({\n        name: sourceArtist.name,\n        genre: edge.label as Genre,\n      });\n\n      return result;\n    }, {} as { [artistId: string]: { name: string; genre: Genre }[] });\n  }, [graph]);\n\n  const [selectedArtist, setSelectedArtist] = useState<Artist>();\n\n  const selectedArtistConnections =\n    selectedArtist && artistsConnections[selectedArtist.id];\n\n  const onArtistHover = (result: { data: { node: SigmaNode } }) => {\n    setSelectedArtist(getArtistById(result.data.node.id));\n  };\n\n  return (\n    <div className={styles.container}>\n      <Sigma\n        graph={graph}\n        renderer=\"canvas\"\n        settings={{\n          clone: false,\n          defaultLabelSize: 10,\n          zoomMin: 0.03,\n        }}\n        style={{\n          flex: 1,\n          height: \"80vh\",\n          backgroundColor: \"white\",\n        }}\n        onOverNode={onArtistHover}\n      >\n        <RelativeSize initialSize={8} />\n      </Sigma>\n\n      <div className={styles.selectedArtist}>\n        {selectedArtist && selectedArtistConnections ? (\n          <>\n            <p>\n              <b>Name</b>: {selectedArtist.name}\n            </p>\n            <p>\n              <b>Popularity</b>: {selectedArtist.popularity}\n            </p>\n            <p>\n              <b>Followers</b>: {selectedArtist.followers.total}\n            </p>\n            <p>\n              <b>Genres</b>: {selectedArtist.genres.join(\", \")}\n            </p>\n            <p>\n              <b>Connected with ({selectedArtistConnections.length})</b>:{\" \"}\n              {selectedArtistConnections\n                .slice(0, maxArtistsConnectionsToShow)\n                .map((artist) => (\n                  <span\n                    key={artist.name}\n                    style={{ color: genreColor[artist.genre] }}\n                  >\n                    {artist.name}\n                    {\"; \"}\n                  </span>\n                ))}{\" \"}\n              {selectedArtistConnections.length - maxArtistsConnectionsToShow >\n                0 && (\n                <span>{`and ${\n                  selectedArtistConnections.length - maxArtistsConnectionsToShow\n                } more`}</span>\n              )}\n            </p>\n          </>\n        ) : (\n          <p>Hover over an artist to see details</p>\n        )}\n      </div>\n\n      <div className={styles.legend}>\n        {allGenres.map((genre) => (\n          <div key={genre} className={styles.legendGenre}>\n            <div\n              className={styles.legendGenreColor}\n              style={{ backgroundColor: genreColor[genre] }}\n            />\n            <p>{genre}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction generateRelatedArtistsNetwork(): SigmaGraph {\n  const nodes = dataNodes.map((node, index) => {\n    const artistId = node[0] as string;\n\n    const [x, y] = dataPositions[artistId as keyof typeof dataPositions] as [\n      number,\n      number\n    ];\n\n    const size = normalize(dataNodeSize[index], 1, 4);\n\n    const color = dataNodeColor[index];\n\n    return {\n      id: artistId,\n      label: getArtistById(artistId).name,\n      x,\n      y,\n      size,\n      color,\n    };\n  });\n\n  const edges = (dataEdges as any).map(\n    (edge: [from: number, to: number, attributes: { genre: string }]) => {\n      const from = edge[0];\n      const to = edge[1];\n      const attributes = edge[2];\n\n      const color = \"rgba(0,0,0, 0.1)\";\n\n      return {\n        id: `${from}-${to}`,\n        source: from,\n        target: to,\n        label: attributes.genre,\n        color,\n      };\n    }\n  );\n\n  return {\n    nodes,\n    edges,\n  };\n}\n\nexport default RelatedArtists;\n","import React from \"react\";\nimport styles from \"./styles.module.css\";\n\ninterface TitleProps {\n  readonly children: React.ReactNode;\n}\n\nconst Title: React.FC<TitleProps> = ({ children }) => {\n  return <div className={styles.container}>{children}</div>;\n};\n\nexport default Title;\n","type FalsyStyle = null | undefined | false | \"\";\n\nexport default function joinCls(...classes: (string | FalsyStyle)[]) {\n  return classes.filter((c) => c).join(\" \");\n}\n","import { Sentiment } from \"../../interfaces/sentiments\";\nimport { getArtistById } from \"../artists\";\nimport sentimentsPop from \"./all_artists_sentiment_pop.json\";\nimport sentimentsRap from \"./all_artists_sentiment_rap.json\";\n\nexport enum SelectedGenre {\n  Pop,\n  Rap,\n}\n\nexport function getArtistsWithSentiment(genre: SelectedGenre) {\n  const artists = ((genre === SelectedGenre.Pop\n    ? sentimentsPop\n    : sentimentsRap) as unknown) as Sentiment[];\n\n  return artists.map(({ artist, happiness_average }) => ({\n    ...getArtistById(artist),\n    happiness_average,\n  }));\n}\n","export default __webpack_public_path__ + \"static/media/popularities_normal.1de4143b.svg\";","export default __webpack_public_path__ + \"static/media/genres.74d415dc.svg\";","import React from \"react\";\nimport styles from \"./styles.module.css\";\n\nimport popularities from \"./popularities_normal.svg\";\nimport genres from \"./genres.svg\";\n\nconst Artists: React.FC = () => {\n  return (\n    <div className={styles.container}>\n      <section>\n        <p>\n          There are 34 633 artists used in the analysis below. Each of the\n          artist is identified by the following attributes:\n        </p>\n        <ol className={styles.artistAttributes}>\n          <li>\n            <i>id</i> - the Spotify ID for the artist\n          </li>\n          <li>\n            <i>name</i> - the name of the artist\n          </li>\n          <li>\n            <i>popularity</i> - the popularity of the artist, a value between 0\n            and 100, with 100 being the most popular. The artist’s popularity\n            depends on the popularity of all the artist’s tracks.\n          </li>\n          <li>\n            <i>followers</i> - the total number of artist's followers\n          </li>\n          <li>\n            <i>genres</i> - a list of the genres the artist is associated with\n          </li>\n        </ol>\n      </section>\n\n      <section>\n        <b>Popularities</b>\n        <p>\n          Based on calculations it was found that the average popularity is\n          equal to 47.96 and the standard deviation of popularities is equal to\n          14. The figure below shows the distribution of artists' popularities.\n          It seems that the distribution partially resembles a Gaussian\n          distribution. For the sake of comparison a normal distribution with\n          the aforementioned parameters is plotted in a red color.\n        </p>\n        <img src={popularities} width={800} alt={\"popularities\"} />\n      </section>\n\n      <section>\n        <b>Genres</b>\n        <p>\n          It was found that there are 3301 genres among all artists in the data\n          set. To find which ones are more popular or tend to have more artists\n          involved a histogram of genres was plotted below. It seems that the\n          genres with the highest number of artists include different variations\n          of rock such as rock, hard rock, pub rock, stoner rock, but also dirty\n          south rap, dancehall, glitchcore or reggae fusion. Among genres with\n          less artists there are gospel blues, jewish hip hop, israeli trap,\n          finnish classical, folk rock italiano. It makes a lot of sense as\n          these genres seem to be more specialized or niche and they are often\n          subgenres of more popular genres.\n        </p>\n      </section>\n\n      <img\n        src={genres}\n        width={1100}\n        height={850}\n        style={{ marginTop: \"-200px\", marginBottom: \"32px\" }}\n        alt={\"genres\"}\n      />\n    </div>\n  );\n};\n\nexport default Artists;\n","import React, { useMemo, useState } from \"react\";\nimport styles from \"./styles.module.css\";\nimport { Artist } from \"../../interfaces/artists\";\nimport { getArtistsWithSentiment, SelectedGenre } from \"../../data/Sentiment\";\nimport Link from \"../Link\";\n\nconst Sentiments: React.FC = () => {\n  const [text, setText] = useState<string>();\n\n  const [selectedGenre, setSelectedGenre] = useState<SelectedGenre>(\n    SelectedGenre.Pop\n  );\n\n  const [selectedArtist, setSelectedArtist] = useState<\n    Artist & { happiness_average: number }\n  >();\n\n  const allArtists = useMemo(() => getArtistsWithSentiment(selectedGenre), [\n    selectedGenre,\n  ]);\n\n  const filteredArtists = useMemo(() => {\n    if (text) {\n      return allArtists.filter((artist) =>\n        artist.name.toLowerCase().includes(text.toLowerCase())\n      );\n    } else {\n      return allArtists;\n    }\n  }, [text, allArtists]);\n\n  return (\n    <div className={styles.container}>\n      <p>Please select a genre:</p>\n\n      <button\n        className={\n          selectedGenre === SelectedGenre.Pop\n            ? styles.btn_green\n            : styles.btn_white\n        }\n        onClick={() => setSelectedGenre(SelectedGenre.Pop)}\n      >\n        Pop\n      </button>\n      <button\n        className={\n          selectedGenre === SelectedGenre.Rap\n            ? styles.btn_green\n            : styles.btn_white\n        }\n        style={{ marginRight: 0 }}\n        onClick={() => setSelectedGenre(SelectedGenre.Rap)}\n      >\n        Rap\n      </button>\n\n      <div className={styles.content}>\n        <div className={styles.artists}>\n          <input\n            type=\"text\"\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            placeholder={\"Search for an artist...\"}\n          />\n\n          <div className={styles.artistsList}>\n            <ul>\n              {filteredArtists.map((artist) => {\n                return (\n                  <li\n                    key={`sentiments-${artist.id}`}\n                    onClick={() => setSelectedArtist(artist)}\n                  >\n                    {artist.name}\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </div>\n\n        <div className={styles.selectedArtist}>\n          {selectedArtist ? (\n            <>\n              <h3>Selected artist</h3>\n\n              <p>\n                <b>Name</b>:{\" \"}\n                <Link\n                  url={`https://open.spotify.com/artist/${selectedArtist.id}`}\n                >\n                  {selectedArtist.name}\n                </Link>\n              </p>\n              <p>\n                <b>Happiness average</b>: {selectedArtist.happiness_average}\n              </p>\n              <p>\n                <b>Popularity</b>: {selectedArtist.popularity}\n              </p>\n              <p>\n                <b>Followers</b>: {selectedArtist.followers.total}\n              </p>\n              <p>\n                <b>Genres</b>: {selectedArtist.genres.join(\", \")}\n              </p>\n            </>\n          ) : (\n            <p>Please select an artist on the left</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Sentiments;\n","import React from \"react\";\nimport styles from \"./App.module.css\";\nimport ArtistsByGenres from \"./components/ArtistsByGenres\";\nimport DataSets from \"./components/DataSets\";\nimport Introduction from \"./components/Introduction\";\nimport TFTR from \"./components/TFTR\";\nimport RelatedArtists from \"./components/RelatedArtists\";\nimport Title from \"./components/Title\";\nimport joinCls from \"./helpers/joinClasses\";\nimport Artists from \"./components/Artists\";\nimport Sentiments from \"./components/Sentiments\";\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <h1>Social Graphs</h1>\n      <h3>Assignment 2</h3>\n      <ul>\n        <li>Nicolae Popovici</li>\n        <li>Benjamin Starostka</li>\n        <li>Bartosz Selwesiuk</li>\n      </ul>\n\n      <div className={joinCls(styles.introduction, styles.section)}>\n        <Title>Introduction</Title>\n        <Introduction />\n      </div>\n\n      <div className={styles.section}>\n        <Title>Artists</Title>\n        <Artists />\n      </div>\n\n      <div className={styles.section}>\n        <Title>Artists network based on genres</Title>\n        <ArtistsByGenres />\n      </div>\n\n      <div className={styles.section}>\n        <Title>Related artists network</Title>\n        <RelatedArtists />\n      </div>\n\n      <div className={styles.section}>\n        <Title>TF-TR</Title>\n        <TFTR />\n      </div>\n\n      <div className={styles.section}>\n        <Title>Sentiment analysis</Title>\n        <Sentiments />\n      </div>\n\n      <div className={styles.section}>\n        <Title>Download data sets</Title>\n        <DataSets />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}