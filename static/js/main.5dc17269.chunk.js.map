{"version":3,"sources":["components/Sentiments/styles.module.css","components/ArtistsByGenres/styles.module.css","components/RelatedArtists/styles.module.css","components/TFTR/styles.module.css","App.module.css","components/TFIDF/styles.module.css","components/ArtistsByGenres/topConnected.styles.module.css","components/DataSets/styles.module.css","components/Artists/styles.module.css","components/Introduction/styles.module.css","components/Title/styles.module.css","helpers/normalize.ts","interfaces/genres.ts","components/ArtistsByGenres/degree_distribution.svg","components/ArtistsByGenres/degree_distribution_log_log.svg","data/genres.ts","data/ArtistsByGenres/top.ts","components/Link.tsx","data/artists.ts","components/ArtistsByGenres/TopConnected.tsx","components/ArtistsByGenres/index.tsx","components/DataSets/index.tsx","components/Introduction/index.tsx","helpers/joinClasses.ts","media/pop_vs_rap.png","components/TFTR/index.tsx","media/rap.png","media/r&b.png","media/rock.png","media/pop_vs_jazz.png","media/jazz.png","components/TFIDF/index.tsx","components/TFIDF/tf_idf_distribution.svg","components/TFIDF/12.png","components/TFIDF/2.png","components/TFIDF/3.png","data/RelatedArtists/top.ts","components/RelatedArtists/degree_distribution.svg","components/RelatedArtists/degree_distribution_log_log.svg","components/RelatedArtists/index.tsx","data/Sentiment/index.ts","components/Title/index.tsx","components/Artists/popularities_normal.svg","components/Artists/genres.svg","components/Artists/index.tsx","components/Sentiments/pop_frequency.svg","components/Sentiments/rap_frequency.svg","data/Sentiment/happiest.ts","data/Sentiment/sadest.ts","components/Sentiments/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","normalize","value","min","max","Genre","allGenres","Chillhop","ContemporaryCountry","Broadway","DancePop","AnthemWorship","EmoRap","AlbumRock","Hollywood","BigRoom","AlternativeRB","genreColor","genreConnections","mostConnectedArtists","id","name","connections","image","leastConnectedArtists","Link","url","color","internal","children","style","display","target","undefined","href","getArtistById","dataArtists","maxArtistsConnectionsToShow","TopConnected","forSentimentArtists","artists","artistsConnections","maxArtistsConnections","className","styles","topConnectedArtists","map","artist","topConnectedArtist","src","alt","happiness_rating","genres","join","length","slice","genre","ArtistsByGenres","graph","useMemo","nodes","dataNodes","node","index","artistId","dataPositions","x","y","size","dataNodeSize","label","edges","dataEdges","edge","from","to","attributes","dataEdgeColor","source","generateArtistsByGenresNetwork","reduce","result","sourceArtist","targetArtist","push","useState","selectedArtist","setSelectedArtist","selectedArtistConnections","container","topGenres","topGenre","topGenreColor","backgroundColor","content","renderer","settings","clone","defaultLabelSize","zoomMin","width","height","onOverNode","data","popularity","followers","total","legend","legendGenre","legendGenreColor","legendGenreName","spaceSmall","space","spaceMedium","degreeDistribution","degreeDistributionLogLog","marginTop","DataSets","loadFromFile","Introduction","joinCls","classes","filter","c","ComparedGenres","displayComparedGenres","PopVsRap","images","pop_vs_rap","rap","RhythmAndBluesVsRock","r_and_b","rock","PopVsJazz","pop_jazz","jazz","TF_TR","CommunityType","comparedGenres","setComparedGenres","btn_green","btnNotSelected","onClick","btn_red","btn_blue","Community","leading_genre","artists_total","wordCloud","this","communities","wordcloud_12","Trap","wordcloud_2","wordcloud_3","displayCommunity","communityType","community","toString","TF_IDF","setCommunity","image_distribution","distribution_svg","image_btns","btn_image","RelatedArtists","SelectedGenre","dataNodeColor","generateRelatedArtistsNetwork","Title","Artists","artistAttributes","popularities","marginBottom","happiestPopArtists","happiestRapArtists","saddestPopArtists","saddestRapArtists","Sentiments","text","setText","Pop","selectedGenre","setSelectedGenre","allArtists","sentimentsPop","sentimentsRap","happiness_average","happiestArtists","saddestArtists","filteredArtists","toLowerCase","includes","happinessRating","pop","textAlign","popSentiment","margin","rapSentiment","btn_white","Rap","marginRight","type","onChange","e","placeholder","artistsList","App","app","introduction","section","TFTR","TFIDF","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5dc17269.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__21osS\",\"content\":\"styles_content__1aiw5\",\"artists\":\"styles_artists__2dQ7A\",\"artistsList\":\"styles_artistsList__1Oq46\",\"selectedArtist\":\"styles_selectedArtist__2yoRe\",\"space\":\"styles_space__2TojU\",\"btn_green\":\"styles_btn_green__1O30G\",\"btn_white\":\"styles_btn_white__XN6Jz\",\"happinessRating\":\"styles_happinessRating__2PXBm\",\"pop\":\"styles_pop__2ZZYz\",\"rap\":\"styles_rap__dm4-s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2kpeh\",\"content\":\"styles_content__1FBQW\",\"selectedArtist\":\"styles_selectedArtist__3OYiY\",\"legend\":\"styles_legend__5bEjw\",\"legendGenre\":\"styles_legendGenre__7wpKn\",\"legendGenreColor\":\"styles_legendGenreColor__CxEmy\",\"legendGenreName\":\"styles_legendGenreName__1NjvT\",\"topGenre\":\"styles_topGenre__3Np6e\",\"topGenreColor\":\"styles_topGenreColor__2VNk6\",\"spaceSmall\":\"styles_spaceSmall__1wHwe\",\"spaceMedium\":\"styles_spaceMedium__3bAvh\",\"space\":\"styles_space__2Mrnz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3ZDPL\",\"content\":\"styles_content__FaOCA\",\"selectedArtist\":\"styles_selectedArtist__w11q6\",\"legend\":\"styles_legend__ogw0p\",\"legendGenre\":\"styles_legendGenre__e4hzW\",\"legendGenreColor\":\"styles_legendGenreColor__QKduS\",\"legendGenreName\":\"styles_legendGenreName__U6OYz\",\"spaceSmall\":\"styles_spaceSmall__VHcOH\",\"spaceMedium\":\"styles_spaceMedium__3XVKN\",\"space\":\"styles_space__2Tl8h\",\"genreColor\":\"styles_genreColor__3MJxz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__XqS9v\",\"btn_green\":\"styles_btn_green__3-C-v\",\"btn_red\":\"styles_btn_red__2Lkzq\",\"btn_blue\":\"styles_btn_blue__2gqBg\",\"btnNotSelected\":\"styles_btnNotSelected__2ElYE\",\"images\":\"styles_images__30fRr\",\"comparedGenres\":\"styles_comparedGenres__26Dk5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"introduction\":\"App_introduction__1Jmpc\",\"section\":\"App_section__1OL6S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image_distribution\":\"styles_image_distribution__1Vkpa\",\"image\":\"styles_image__20HgK\",\"image_btns\":\"styles_image_btns__3nsjm\",\"btn_image\":\"styles_btn_image__2uWOm\",\"artists\":\"styles_artists__NVgI6\",\"container\":\"styles_container__3izfS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topConnectedArtists\":\"topConnected_styles_topConnectedArtists__1Y_ro\",\"topConnectedArtist\":\"topConnected_styles_topConnectedArtist__-xqCF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2JKN2\",\"link\":\"styles_link__ENEmF\",\"loadFromFile\":\"styles_loadFromFile__O3EcU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__sJfDG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container___SrVZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1PuJX\"};","export function normalize(value: number, min: number, max: number) {\n  return (value - min) / (max - min);\n}\n","export enum Genre {\n  Chillhop = \"chillhop\",\n  ContemporaryCountry = \"contemporary country\",\n  Broadway = \"broadway\",\n  DancePop = \"dance pop\",\n  AnthemWorship = \"anthem worship\",\n  EmoRap = \"emo rap\",\n  AlbumRock = \"album rock\",\n  Hollywood = \"hollywood\",\n  BigRoom = \"big room\",\n  AlternativeRB = \"alternative r&b\",\n}\n","export default __webpack_public_path__ + \"static/media/degree_distribution.8ae2670b.svg\";","export default __webpack_public_path__ + \"static/media/degree_distribution_log_log.e63e2f2a.svg\";","import { Genre } from \"../interfaces/genres\";\n\nexport const allGenres = [\n  Genre.Chillhop,\n  Genre.ContemporaryCountry,\n  Genre.Broadway,\n  Genre.DancePop,\n  Genre.AnthemWorship,\n  Genre.EmoRap,\n  Genre.AlbumRock,\n  Genre.Hollywood,\n  Genre.BigRoom,\n  Genre.AlternativeRB,\n];\n\nexport const genreColor: { [genre in Genre]: string } = {\n  [Genre.Chillhop]: \"#fff100\",\n  [Genre.ContemporaryCountry]: \"#ff8c00\",\n  [Genre.Broadway]: \"#e81123\",\n  [Genre.DancePop]: \"#ec008c\",\n  [Genre.AnthemWorship]: \"#68217a\",\n  [Genre.EmoRap]: \"#00188f\",\n  [Genre.AlbumRock]: \"#00bcf2\",\n  [Genre.Hollywood]: \"#00b294\",\n  [Genre.BigRoom]: \"#009e49\",\n  [Genre.AlternativeRB]: \"#bad80a\",\n};\n\n/**\n * A histogram of genres\n */\nexport const genreConnections: { [genre in Genre]: number } = {\n  [Genre.Chillhop]: 7365,\n  [Genre.ContemporaryCountry]: 6642,\n  [Genre.Broadway]: 4120,\n  [Genre.DancePop]: 2773,\n  [Genre.AnthemWorship]: 2508,\n  [Genre.EmoRap]: 2396,\n  [Genre.AlbumRock]: 1678,\n  [Genre.Hollywood]: 1585,\n  [Genre.BigRoom]: 1420,\n  [Genre.AlternativeRB]: 1322,\n};\n","import { TopConnectedArtist } from \"../../interfaces/artists\";\n\nexport const mostConnectedArtists: TopConnectedArtist[] = [\n  {\n    id: \"1FtS4zSQaKNwJDXcXWX9CD\",\n    name: \"Hazy Year\",\n    connections: 121,\n    image: \"https://i.scdn.co/image/9c6b76d41eb45613cafc45703c2dcf8484b08938\",\n  },\n  {\n    id: \"7D6kLgvRHr6DNDavc0LhvI\",\n    name: \"jhfly\",\n    connections: 121,\n    image:\n      \"https://scontent-cph2-1.xx.fbcdn.net/v/t1.0-9/15781229_1263546197046532_3199762131927658142_n.png?_nc_cat=102&ccb=2&_nc_sid=09cbfe&_nc_ohc=OtB2nzEg7wwAX_vhAY-&_nc_ht=scontent-cph2-1.xx&oh=8fa24f7579d86bb07c27314fb248d40b&oe=5FF6353D\",\n  },\n  {\n    id: \"6psQOFgr41pQ2CiL2CCi47\",\n    name: \"fantompower\",\n    connections: 121,\n    image: \"https://i.scdn.co/image/0aa36c79e89edd5194062b06e86e174d8edcd6f0\",\n  },\n  {\n    id: \"6M6LWvHKgBle8SUtSpq6SU\",\n    name: \"iamalex\",\n    connections: 121,\n    image: \"https://i.scdn.co/image/b4de436ebe725194632ee3dba96fea43665b7092\",\n  },\n  {\n    id: \"3nCJkmgdZQ6l8o828Y3vNQ\",\n    name: \"A L E X\",\n    connections: 121,\n    image: \"https://i.scdn.co/image/2bc99a6fe6cdf70154eb3d3b42c5e9705eeb6afd\",\n  },\n];\n\nexport const leastConnectedArtists: TopConnectedArtist[] = [\n  {\n    id: \"0x4xCoWaOFd3WsKarzaxnW\",\n    name: \"Frankie Cosmos\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/af077ddfb6add2219f809e1914b3cc741aacf61a\",\n  },\n  {\n    id: \"5q6z6GTth6lMbL9I8CAgby\",\n    name: \"Anderson East\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/81121623f0097f1d3d8cd919ffee36e25d16a4cf\",\n  },\n  {\n    id: \"7vkiEK5D7Gf0z4M1Va0CXD\",\n    name: \"The Vines\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/49e553864ab27388a3231ac990fa6df0ec7b0b08\",\n  },\n  {\n    id: \"2jw70GZXlAI8QzWeY2bgRc\",\n    name: \"Nelly Furtado\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/0ef9eb29df6c9ed08604e962ddfed709c521f543\",\n  },\n  {\n    id: \"3jTlKw98Ql1jGRPYqhqHap\",\n    name: \"Skindred\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/270b075c6caa04aa7a55659f2ea038e35ab6d5df\",\n  },\n];\n","import React from \"react\";\n\ninterface LinkProps {\n  readonly url: string;\n  readonly color?: string;\n  readonly internal?: boolean;\n}\n\nconst Link: React.FC<LinkProps> = ({ url, color, internal, children }) => (\n  <a\n    style={{ display: \"inline-block\", color: color ?? \"#1db954\" }}\n    target={!internal ? \"blank\" : undefined}\n    href={url}\n  >\n    {children}\n  </a>\n);\n\nexport default Link;\n","import { Artist } from \"../interfaces/artists\";\nimport dataArtists from \"./artists.json\";\n\nexport function getArtistById(id: string) {\n  return dataArtists[id as keyof typeof dataArtists] as Artist;\n}\n","import React from \"react\";\nimport { SentimentArtist, TopConnectedArtist } from \"../../interfaces/artists\";\nimport { Genre } from \"../../interfaces/genres\";\nimport Link from \"../Link\";\nimport styles from \"./topConnected.styles.module.css\";\nimport { genreColor } from \"../../data/genres\";\nimport { getArtistById } from \"../../data/artists\";\n\ninterface TopConnectedProps {\n  readonly forSentimentArtists?: boolean;\n  readonly artists: (TopConnectedArtist | SentimentArtist)[];\n  readonly artistsConnections?: {\n    [artistId: string]: { id: string; name: string; genre: Genre }[];\n  };\n  readonly maxArtistsConnections?: number;\n}\n\nconst TopConnected: React.FC<TopConnectedProps> = ({\n  forSentimentArtists,\n  artists,\n  artistsConnections,\n  maxArtistsConnections = maxArtistsConnectionsToShow,\n}) => {\n  return (\n    <div className={styles.topConnectedArtists}>\n      {artists.map((artist) => {\n        const connections = artistsConnections?.[artist.id];\n\n        return (\n          <div\n            key={`topConnected-${artist.id}`}\n            className={styles.topConnectedArtist}\n          >\n            <Link\n              url={`https://open.spotify.com/artist/${artist.id}`}\n              color={\"inherit\"}\n            >\n              <img src={artist.image} alt={artist.name} />\n              <div>{artist.name}</div>\n            </Link>\n\n            {forSentimentArtists && (\n              <p>\n                <b>Happiness rating</b>\n                <br />\n                {(artist as SentimentArtist).happiness_rating}\n              </p>\n            )}\n\n            <p>\n              <b>Genres</b>\n              <br />\n              {getArtistById(artist.id).genres.join(\", \")}\n            </p>\n\n            {connections && (\n              <>\n                <b>Connected with ({connections.length})</b>\n                <br />\n                {connections.slice(0, maxArtistsConnections).map((artist) => (\n                  <Link\n                    key={artist.name}\n                    url={`https://open.spotify.com/artist/${artist.id}`}\n                    color={genreColor[artist.genre]}\n                  >\n                    {`${artist.name};`}&nbsp;\n                  </Link>\n                ))}\n                {connections.length - maxArtistsConnections > 0 && (\n                  <span>{`and ${\n                    connections.length - maxArtistsConnections\n                  } more`}</span>\n                )}\n              </>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport const maxArtistsConnectionsToShow = 20;\n\nexport default TopConnected;\n","import React, { useMemo, useState } from \"react\";\nimport { Sigma, SigmaGraph, RelativeSize, SigmaNode } from \"react-sigma\";\nimport { normalize } from \"../../helpers/normalize\";\nimport styles from \"./styles.module.css\";\n\nimport dataNodes from \"../../data/ArtistsByGenres/nodes.json\";\nimport dataEdges from \"../../data/ArtistsByGenres/edges.json\";\nimport dataPositions from \"../../data/ArtistsByGenres/positions.json\";\nimport dataNodeSize from \"../../data/ArtistsByGenres/node_size.json\";\nimport dataEdgeColor from \"../../data/ArtistsByGenres/edge_color.json\";\nimport { Genre } from \"../../interfaces/genres\";\n\nimport degreeDistribution from \"./degree_distribution.svg\";\nimport degreeDistributionLogLog from \"./degree_distribution_log_log.svg\";\nimport { allGenres, genreColor, genreConnections } from \"../../data/genres\";\nimport { Artist } from \"../../interfaces/artists\";\nimport {\n  leastConnectedArtists,\n  mostConnectedArtists,\n} from \"../../data/ArtistsByGenres/top\";\nimport Link from \"../Link\";\nimport TopConnected, { maxArtistsConnectionsToShow } from \"./TopConnected\";\nimport { getArtistById } from \"../../data/artists\";\n\nconst ArtistsByGenres: React.FC = () => {\n  const graph = useMemo(() => generateArtistsByGenresNetwork(), []);\n\n  const artistsConnections = useMemo(() => {\n    return graph.edges.reduce((result, edge) => {\n      if (!(edge.source in result)) result[edge.source] = [];\n      if (!(edge.target in result)) result[edge.target] = [];\n\n      const sourceArtist = getArtistById(edge.source);\n      const targetArtist = getArtistById(edge.target);\n\n      result[edge.source].push({\n        id: targetArtist.id,\n        name: targetArtist.name,\n        genre: edge.label as Genre,\n      });\n      result[edge.target].push({\n        id: sourceArtist.id,\n        name: sourceArtist.name,\n        genre: edge.label as Genre,\n      });\n\n      return result;\n    }, {} as { [artistId: string]: { id: string; name: string; genre: Genre }[] });\n  }, [graph]);\n\n  const [selectedArtist, setSelectedArtist] = useState<Artist>();\n\n  const selectedArtistConnections =\n    selectedArtist && artistsConnections[selectedArtist.id];\n\n  const onArtistHover = (result: { data: { node: SigmaNode } }) => {\n    setSelectedArtist(getArtistById(result.data.node.id));\n  };\n\n  return (\n    <div className={styles.container}>\n      <section>\n        <p>\n          The following section explores how artists are related based on shared\n          genres between them. As introduced before, each artist is associated\n          with a list of genres the artist has produced songs in. The network of\n          artists consists of artists where each pair of artists is connected if\n          the ratio of shared genres is at least 60%. As a result, the edges\n          represent how artists are related based on how many genres they have\n          in common.\n        </p>\n\n        <p>\n          Genres having most connections in the network were found and are\n          presented below. Edges that are colored accordingly to top genres\n          legend represent connections between artists that produce the same top\n          genres.\n        </p>\n\n        <ul className={styles.topGenres}>\n          {allGenres.map((genre, index) => (\n            <li key={`allGenres-${genre}`} className={styles.topGenre}>\n              <span\n                className={styles.topGenreColor}\n                style={{ backgroundColor: genreColor[genre] }}\n              ></span>\n              <p>\n                {index + 1}. {genre} ({genreConnections[genre]} connections)\n              </p>\n            </li>\n          ))}\n        </ul>\n\n        <br />\n\n        <p>\n          The interactive network of artists based on genres is presented below.\n          For the sake of better visualization only the giant component of the\n          network is shown. It consists of 6011 nodes with 58810 connections.\n          Hovering over an artist allows to see details about the artist. You\n          may also open the Spotify profile of the artist from the details\n          section.\n        </p>\n      </section>\n\n      <div className={styles.content}>\n        <Sigma\n          graph={graph}\n          renderer=\"canvas\"\n          settings={{\n            clone: false,\n            defaultLabelSize: 10,\n            zoomMin: 0.03,\n          }}\n          style={{\n            width: \"1000px\",\n            height: \"80vh\",\n          }}\n          onOverNode={onArtistHover}\n        />\n\n        <div className={styles.selectedArtist}>\n          {selectedArtist && selectedArtistConnections ? (\n            <>\n              <p>\n                <b>Name</b>:{\" \"}\n                <Link\n                  url={`https://open.spotify.com/artist/${selectedArtist.id}`}\n                  color={\"inherit\"}\n                >\n                  {selectedArtist.name}\n                </Link>\n              </p>\n              <p>\n                <b>Popularity</b>: {selectedArtist.popularity}\n              </p>\n              <p>\n                <b>Followers</b>: {selectedArtist.followers.total}\n              </p>\n              <p>\n                <b>Genres</b>: {selectedArtist.genres.join(\", \")}\n              </p>\n              <p>\n                <b>Connected with ({selectedArtistConnections.length})</b>:{\" \"}\n                {selectedArtistConnections\n                  .slice(0, maxArtistsConnectionsToShow)\n                  .map((artist) => (\n                    <Link\n                      key={artist.name}\n                      url={`https://open.spotify.com/artist/${artist.id}`}\n                      color={genreColor[artist.genre]}\n                    >\n                      {`${artist.name};`}&nbsp;\n                    </Link>\n                  ))}\n                {selectedArtistConnections.length -\n                  maxArtistsConnectionsToShow >\n                  0 && (\n                  <span>{`and ${\n                    selectedArtistConnections.length -\n                    maxArtistsConnectionsToShow\n                  } more`}</span>\n                )}\n              </p>\n            </>\n          ) : (\n            <p>Hover over an artist to see details</p>\n          )}\n        </div>\n\n        <div className={styles.legend}>\n          {allGenres.map((genre) => (\n            <div key={genre} className={styles.legendGenre}>\n              <span\n                className={styles.legendGenreColor}\n                style={{ backgroundColor: genreColor[genre] }}\n              />\n              <span className={styles.legendGenreName}>{genre}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <section>\n        <p>\n          Most and least connected artists in the network were extracted and are\n          presented below. You may press on the artist to view their Spotify\n          profile.\n        </p>\n      </section>\n\n      <div className={styles.spaceSmall} />\n\n      <h3>5 most connected artists</h3>\n\n      <TopConnected\n        artists={mostConnectedArtists}\n        artistsConnections={artistsConnections}\n      />\n\n      <div className={styles.space} />\n\n      <h3>5 least connected artists</h3>\n\n      <TopConnected\n        artists={leastConnectedArtists}\n        artistsConnections={artistsConnections}\n      />\n\n      <div className={styles.space} />\n      <div className={styles.spaceMedium} />\n\n      <section>\n        <p>\n          Degree distributions for the discussed network of artists by genres\n          are presented below. The left part of the upper plot resembles a part\n          of a Poisson distribution indicating that most nodes have a similar\n          number of connections. On the other side, the right part shows that\n          there exist a few hubs with large number of connections. Looking at\n          log-log plot, it can be observed that the relation between a degree\n          and the number of artists is close to exponential. Overall, it can be\n          said that the network resembles something in-between a scale free and\n          a random network.\n        </p>\n      </section>\n\n      <img src={degreeDistribution} width={1200} alt={\"degree distribution\"} />\n      <img\n        src={degreeDistributionLogLog}\n        width={800}\n        style={{ marginTop: 24 }}\n        alt={\"degree distribution (log log)\"}\n      />\n    </div>\n  );\n};\n\nfunction generateArtistsByGenresNetwork(): SigmaGraph {\n  const nodes = dataNodes.map((node, index) => {\n    const artistId = node[0] as string;\n\n    const [x, y] = dataPositions[artistId as keyof typeof dataPositions] as [\n      number,\n      number\n    ];\n\n    const size = normalize(dataNodeSize[index], 1, 4);\n\n    const color = \"rgba(30, 118, 176, 0.6)\";\n\n    return {\n      id: artistId,\n      label: getArtistById(artistId).name,\n      x,\n      y,\n      size,\n      color,\n    };\n  });\n\n  const edges = (dataEdges as any).map(\n    (\n      edge: [from: number, to: number, attributes: { genre: string }],\n      index: number\n    ) => {\n      const from = edge[0];\n      const to = edge[1];\n      const attributes = edge[2];\n\n      const color = dataEdgeColor[index];\n\n      return {\n        id: `${from}-${to}`,\n        source: from,\n        target: to,\n        label: attributes.genre,\n        color,\n      };\n    }\n  );\n\n  return {\n    nodes,\n    edges,\n  };\n}\n\nexport default ArtistsByGenres;\n","import React from \"react\";\nimport Link from \"../Link\";\nimport styles from \"./styles.module.css\";\n\nconst DataSets: React.FC = () => {\n  return (\n    <div className={styles.container}>\n      <section>\n        <p>\n          {\n            \"Hope you found it interesting to follow our analysis of the music world. \"\n          }\n          {\"For a more technical view please check the  \"}\n          <Link\n            url={\n              \"https://deepnote.com/project/619f7d16-fc6d-47f3-9f09-59010ce86b6e\"\n            }\n          >\n            explainer notebook\n          </Link>\n          {\".\"}\n        </p>\n        <p>\n          {\n            \"All data sets used in the assignment (lyrics, artists, tracks) are publicly available \"\n          }\n          <Link\n            url={\n              \"https://drive.google.com/drive/folders/1-PHHKAzZT6lU-O9BFSg-M3jGVlRGWi8o\"\n            }\n          >\n            here\n          </Link>\n          {\".\"}\n        </p>\n        <p>\n          {\"The data was serialized using \"}\n          <Link url=\"https://docs.python.org/3/library/pickle.html\">\n            {\"pickle\"}\n          </Link>\n          {\" library. In order to load the data from Python use:\"}\n        </p>\n      </section>\n\n      <div className={styles.loadFromFile}>\n        <code>\n          {`def load_from_file(file_name):`}\n          <br />\n          &emsp;{`with open(file_name, \"rb\") as file:`}\n          <br />\n          &emsp;&emsp;{`    return pickle.load(file)`}\n        </code>\n      </div>\n    </div>\n  );\n};\n\nexport default DataSets;\n","import React from \"react\";\nimport Link from \"../Link\";\nimport styles from \"./styles.module.css\";\n\nconst Introduction: React.FC = () => {\n  return (\n    <div className={styles.container}>\n      <section>\n        <p>\n          The aim of this site is to showcase trends within the music industry.\n          The results presented come from analysing many music artists from\n          Spotify and lyrics of the music they've produced.\n        </p>\n        <p>Following data sets have been constructed and used:</p>\n        <ol>\n          <li>\n            An artists file containing all artists (34 663 in total), each with\n            associated attributes: id, name, Spotify popularity, followers and\n            genres.\n          </li>\n          <li>\n            A related artists file containing related artists according to\n            Spotify's recommendations.\n          </li>\n          <li>\n            Lyric files (33 977 in total), each containing a list of top 10\n            artist's tracks with associated lyrics. Each lyric file is named by\n            the Spotify artist ID of the owning artist.\n          </li>\n        </ol>\n\n        <p>\n          <i>\n            Note: These data sets can be accessed from the section{\" \"}\n            <Link internal url=\"#explainer-notebook-data-sets\">\n              Explainer notebook and data sets\n            </Link>{\" \"}\n            below.\n          </i>\n        </p>\n\n        <p>\n          The first couple of sections explore how artists are connected based\n          on their genres or related artists. For a more elaborate analysis,\n          beyond the artist attributes, artists tracks' lyrics were used in the\n          sentiment analysis with the purpose of further exploring the\n          connections between artists and how songs may capture personal traits\n          among groups of artists.\n        </p>\n      </section>\n    </div>\n  );\n};\n\nexport default Introduction;\n","type FalsyStyle = null | undefined | false | \"\";\n\nexport default function joinCls(...classes: (string | FalsyStyle)[]) {\n  return classes.filter((c) => c).join(\" \");\n}\n","export default __webpack_public_path__ + \"static/media/pop_vs_rap.e08e5043.png\";","import React, { useState } from \"react\";\nimport styles from \"./styles.module.css\";\nimport joinCls from \"../../helpers/joinClasses\";\n\nimport pop_vs_rap from \"../../media/pop_vs_rap.png\";\nimport rap from \"../../media/rap.png\";\nimport r_and_b from \"../../media/r&b.png\";\nimport rock from \"../../media/rock.png\";\nimport pop_jazz from \"../../media/pop_vs_jazz.png\";\nimport jazz from \"../../media/jazz.png\";\n\nenum ComparedGenres {\n  PopVsRap,\n  RhythmAndBluesVsRock,\n  PopVsJazz,\n}\n\nconst TF_TR: React.FC = () => {\n  const [comparedGenres, setComparedGenres] = useState<ComparedGenres>(\n    ComparedGenres.PopVsRap\n  );\n\n  return (\n    <div className={styles.container}>\n      <section>\n        <p>\n          For a more elaborate analysis beyond the used artist attributes.\n          Lyrics were used in the sentiment analysis to further explore the\n          connections between artists and how songs may capture personal traits\n          among groups of artists. This section compares a pair of genres and\n          presents two word clouds showing words that appear a lot in one genre\n          compared to the other.\n        </p>\n      </section>\n\n      <p>Please select a pair of genres to compare word clouds:</p>\n      <button\n        className={joinCls(\n          styles.btn_green,\n          comparedGenres !== ComparedGenres.PopVsRap && styles.btnNotSelected\n        )}\n        onClick={() => setComparedGenres(ComparedGenres.PopVsRap)}\n      >\n        Pop vs Rap\n      </button>\n      <button\n        className={joinCls(\n          styles.btn_red,\n          comparedGenres !== ComparedGenres.RhythmAndBluesVsRock &&\n            styles.btnNotSelected\n        )}\n        onClick={() => setComparedGenres(ComparedGenres.RhythmAndBluesVsRock)}\n      >\n        Rhythm and Blues vs Rock\n      </button>\n      <button\n        className={joinCls(\n          styles.btn_blue,\n          comparedGenres !== ComparedGenres.PopVsJazz && styles.btnNotSelected\n        )}\n        onClick={() => setComparedGenres(ComparedGenres.PopVsJazz)}\n      >\n        Pop vs Jazz\n      </button>\n\n      <div className={styles.comparedGenres}>\n        {comparedGenres !== undefined\n          ? displayComparedGenres(comparedGenres)\n          : null}\n      </div>\n\n      <section>\n        <p>\n          One of the most interesting things to take away from these word clouds\n          is the difference in vibe the words present. Ex. Pop seems to have a\n          very happy vibe, singing a lot about love and happiness. Rap has a\n          very harsh vibe compared to Pop, with a lot of swear words being used.\n        </p>\n      </section>\n    </div>\n  );\n};\n\nfunction displayComparedGenres(genres: ComparedGenres) {\n  switch (genres) {\n    case ComparedGenres.PopVsRap:\n      return (\n        <div className={styles.images}>\n          <img src={pop_vs_rap} alt=\"pop\" />\n          <img src={rap} alt=\"rap\" />\n        </div>\n      );\n    case ComparedGenres.RhythmAndBluesVsRock:\n      return (\n        <div className={styles.images}>\n          <img src={r_and_b} alt=\"rhythm and blues\" />\n          <img src={rock} alt=\"rock\" />\n        </div>\n      );\n    case ComparedGenres.PopVsJazz:\n      return (\n        <div className={styles.images}>\n          <img src={pop_jazz} alt=\"pop\" />\n          <img src={jazz} alt=\"jazz\" />\n        </div>\n      );\n  }\n}\n\nexport default TF_TR;\n","export default __webpack_public_path__ + \"static/media/rap.90026e50.png\";","export default __webpack_public_path__ + \"static/media/r&b.4eea9768.png\";","export default __webpack_public_path__ + \"static/media/rock.5f2c13a1.png\";","export default __webpack_public_path__ + \"static/media/pop_vs_jazz.efef8e8f.png\";","export default __webpack_public_path__ + \"static/media/jazz.a3ba15e4.png\";","import React, { useState } from \"react\";\nimport styles from \"./styles.module.css\";\n\nimport distribution_svg from \"./tf_idf_distribution.svg\";\nimport wordcloud_12 from \"./12.png\";\nimport wordcloud_2 from \"./2.png\";\nimport wordcloud_3 from \"./3.png\";\n\nclass Community {\n  id: number;\n  leading_genre: string;\n  artists_total: number;\n  wordCloud: any;\n\n  constructor(\n    id: number,\n    leading_genre: string,\n    artists_total: number,\n    wordCloud: any\n  ) {\n    this.id = id;\n    this.leading_genre = leading_genre;\n    this.artists_total = artists_total;\n    this.wordCloud = wordCloud;\n  }\n}\n\nenum CommunityType {\n  AlbumRock,\n  Trap,\n  DancePop,\n}\n\nconst communities = {\n  [CommunityType.AlbumRock]: new Community(12, \"album rock\", 362, wordcloud_12),\n  [CommunityType.Trap]: new Community(2, \"trap\", 296, wordcloud_2),\n  [CommunityType.DancePop]: new Community(3, \"dance pop\", 275, wordcloud_3),\n};\n\nconst TF_IDF: React.FC = () => {\n  const [community, setCommunity] = useState<CommunityType>(\n    CommunityType.AlbumRock\n  );\n\n  return (\n    <div className={styles.container}>\n      <section>\n        <p>\n          This section strives to define communities of artists and show what\n          words the community considers important.\n        </p>\n      </section>\n\n      <img\n        className={styles.image_distribution}\n        src={distribution_svg}\n        alt=\"Community distribution\"\n      />\n\n      <section>\n        <p>\n          {\" \"}\n          As seen above, the size of the communities varies from having just a\n          few to more than 300 artists. The following 3 largest communities were\n          found: 12, 2, and 3 - corresponding to Rock, Trap, and Dance-pop\n          genres. For these genres, the word clouds showing the most important\n          words for a given community were generated.\n        </p>\n      </section>\n      <br />\n      <p>\n        Please select one of the 3 largest communities to show the word cloud:\n      </p>\n      <div className={styles.image_btns}>\n        <a onClick={() => setCommunity(CommunityType.AlbumRock)}>\n          <img\n            className={styles.btn_image}\n            src={\"https://source.unsplash.com/400x400/?music,rock\"}\n            alt=\"\"\n          />\n          <div>\n            <h3>Album rock</h3>\n          </div>\n        </a>\n        <a onClick={() => setCommunity(CommunityType.Trap)}>\n          <img\n            className={styles.btn_image}\n            src={\"https://source.unsplash.com/400x400/?music,trap\"}\n            alt=\"\"\n          />\n          <div>\n            <h3>Trap</h3>\n          </div>\n        </a>\n        <a onClick={() => setCommunity(CommunityType.DancePop)}>\n          <img\n            className={styles.btn_image}\n            src={\"https://source.unsplash.com/400x400/?music,pop\"}\n            alt=\"\"\n          />\n          <div>\n            <h3>Dance pop</h3>\n          </div>\n        </a>\n      </div>\n\n      {community !== undefined ? displayCommunity(community) : null}\n    </div>\n  );\n};\n\nfunction displayCommunity(communityType: CommunityType) {\n  const community = communities[communityType];\n\n  return (\n    <div>\n      <img\n        className={styles.image}\n        src={community.wordCloud}\n        alt={community.id.toString()}\n      />\n      <div className={styles.artists}>\n        {\"There are \" +\n          community.artists_total +\n          \" artists in the \" +\n          community.leading_genre +\n          \" community.\"}\n      </div>\n    </div>\n  );\n}\n\nexport default TF_IDF;\n","export default __webpack_public_path__ + \"static/media/tf_idf_distribution.94698278.svg\";","export default __webpack_public_path__ + \"static/media/12.caa02e7c.png\";","export default __webpack_public_path__ + \"static/media/2.b7a263af.png\";","export default __webpack_public_path__ + \"static/media/3.8bebd3bc.png\";","import { TopConnectedArtist } from \"../../interfaces/artists\";\n\nexport const mostConnectedArtists: TopConnectedArtist[] = [\n  {\n    id: \"3iMYbOWvKWy8lsjhf7Dkcf\",\n    name: \"Grey Henson\",\n    connections: 103,\n    image:\n      \"https://hollywoodlife.com/wp-content/uploads/2018/06/grey-henson-ftr-1.jpg?w=320\",\n  },\n  {\n    id: \"0E3lRHTut04XpirvWC45bn\",\n    name: \"Ryan McCartan\",\n    connections: 103,\n    image: \"https://i.scdn.co/image/9f48afeef8189c9495e874f4b81af0937068fb83\",\n  },\n  {\n    id: \"2xBOCZLKP7FMXK2dyO5hIe\",\n    name: \"Mandy Gonzalez\",\n    connections: 103,\n    image: \"https://i.scdn.co/image/e5f63b6802424ff6858092e67e58ba15577c6b91\",\n  },\n  {\n    id: \"0vKWxtht5v5MoAu4DID0Ub\",\n    name: \"Jeremy Jordan\",\n    connections: 103,\n    image: \"https://i.scdn.co/image/b47b44ed73a113feb8b45fe5850a54589eecaf3b\",\n  },\n  {\n    id: \"0HMbvm4fAT9B8bAV3mBMJY\",\n    name: \"Miss Saigon Original Cast\",\n    connections: 103,\n    image: \"https://i.scdn.co/image/ab67616d00001e02d56a84d0e52eb145681c6af5\",\n  },\n];\n\nexport const leastConnectedArtists: TopConnectedArtist[] = [\n  {\n    id: \"1HT9k1ZSUL9IczSstOAgWJ\",\n    name: \"Roger Sanchez\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/c6fe98bacf6d0f86cc8d5b85d6f003302abf2830\",\n  },\n  {\n    id: \"1jjpkAHC8bd9fRFfgKyYLP\",\n    name: \"Robert Earl Keen\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/d133dde06b5ae8ea03deef2c74c38b427ff512bd\",\n  },\n  {\n    id: \"2BvzbqWWwLN11XGBYgDZzx\",\n    name: \"Terror Squad\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/ab67616d00001e022e49046fecfba5be6bc7b92a\",\n  },\n  {\n    id: \"6PDLwWvgYNMfBRLqC1h5cJ\",\n    name: \"Buddy\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/01475974b34c77c2bea2c30dafb28ad27fe1a290\",\n  },\n  {\n    id: \"1KP6TWI40m7p3QBTU6u2xo\",\n    name: \"BØRNS\",\n    connections: 1,\n    image: \"https://i.scdn.co/image/67f4f1fd0cef4af7e406c514569034340571c4af\",\n  },\n];\n","export default __webpack_public_path__ + \"static/media/degree_distribution.751362bf.svg\";","export default __webpack_public_path__ + \"static/media/degree_distribution_log_log.f374e45e.svg\";","import React, { useMemo, useState } from \"react\";\nimport { Sigma, SigmaGraph, RelativeSize, SigmaNode } from \"react-sigma\";\nimport { normalize } from \"../../helpers/normalize\";\nimport styles from \"./styles.module.css\";\n\nimport dataNodes from \"../../data/RelatedArtists/nodes.json\";\nimport dataEdges from \"../../data/RelatedArtists/edges.json\";\nimport dataPositions from \"../../data/RelatedArtists/positions.json\";\nimport dataNodeSize from \"../../data/RelatedArtists/node_size.json\";\nimport dataNodeColor from \"../../data/RelatedArtists/node_color.json\";\nimport { Genre } from \"../../interfaces/genres\";\nimport { allGenres, genreColor } from \"../../data/genres\";\nimport { getArtistById } from \"../../data/artists\";\nimport TopConnected, {\n  maxArtistsConnectionsToShow,\n} from \"../ArtistsByGenres/TopConnected\";\nimport Link from \"../Link\";\nimport {\n  leastConnectedArtists,\n  mostConnectedArtists,\n} from \"../../data/RelatedArtists/top\";\nimport degreeDistribution from \"./degree_distribution.svg\";\nimport degreeDistributionLogLog from \"./degree_distribution_log_log.svg\";\n\ninterface Artist {\n  readonly id: string;\n  readonly name: string;\n  readonly popularity: number;\n  readonly followers: { total: number };\n  readonly genres: string[];\n}\n\nconst RelatedArtists: React.FC = () => {\n  const graph = useMemo(() => generateRelatedArtistsNetwork(), []);\n\n  const artistsConnections = useMemo(() => {\n    return graph.edges.reduce((result, edge) => {\n      if (!(edge.source in result)) result[edge.source] = [];\n      if (!(edge.target in result)) result[edge.target] = [];\n\n      const sourceArtist = getArtistById(edge.source);\n      const targetArtist = getArtistById(edge.target);\n\n      result[edge.source].push({\n        id: targetArtist.id,\n        name: targetArtist.name,\n        genre: edge.label as Genre,\n      });\n      result[edge.target].push({\n        id: sourceArtist.id,\n        name: sourceArtist.name,\n        genre: edge.label as Genre,\n      });\n\n      return result;\n    }, {} as { [artistId: string]: { id: string; name: string; genre: Genre }[] });\n  }, [graph]);\n\n  const [selectedArtist, setSelectedArtist] = useState<Artist>();\n\n  const selectedArtistConnections =\n    selectedArtist && artistsConnections[selectedArtist.id];\n\n  const onArtistHover = (result: { data: { node: SigmaNode } }) => {\n    setSelectedArtist(getArtistById(result.data.node.id));\n  };\n\n  return (\n    <div className={styles.container}>\n      <section>\n        <p>\n          The Spotify API offers the possibility to retrieve the related artists\n          based on the analysis of the community's listening history. The\n          following section explores how the related artists are suggested and\n          to what degree the genre of the music has an influence. The network of\n          related artists consists of artists where each pair of artists is\n          connected if artists are related to each other. For a better\n          comparison the same top genres as before were used to color the nodes\n          appropriately.\n        </p>\n\n        <p>\n          The interactive network of related artists is presented below. Only\n          the giant component of the network is shown again. It consists of 5383\n          nodes with 47635 connections. As before, hovering over an artist\n          allows to see details about the artist.\n        </p>\n      </section>\n\n      <div className={styles.content}>\n        <Sigma\n          graph={graph}\n          renderer=\"canvas\"\n          settings={{\n            clone: false,\n            defaultLabelSize: 10,\n            zoomMin: 0.03,\n          }}\n          style={{\n            width: \"1000px\",\n            height: \"80vh\",\n          }}\n          onOverNode={onArtistHover}\n        />\n\n        <div className={styles.selectedArtist}>\n          {selectedArtist && selectedArtistConnections ? (\n            <>\n              <p>\n                <b>Name</b>:{\" \"}\n                <Link\n                  url={`https://open.spotify.com/artist/${selectedArtist.id}`}\n                  color={\"inherit\"}\n                >\n                  {selectedArtist.name}\n                </Link>\n              </p>\n              <p>\n                <b>Popularity</b>: {selectedArtist.popularity}\n              </p>\n              <p>\n                <b>Followers</b>: {selectedArtist.followers.total}\n              </p>\n              <p>\n                <b>Genres</b>: {selectedArtist.genres.join(\", \")}\n              </p>\n              <p>\n                <b>Connected with ({selectedArtistConnections.length})</b>:{\" \"}\n                {selectedArtistConnections\n                  .slice(0, maxArtistsConnectionsToShow)\n                  .map((artist) => (\n                    <Link\n                      key={artist.name}\n                      url={`https://open.spotify.com/artist/${artist.id}`}\n                      color={genreColor[artist.genre]}\n                    >\n                      {`${artist.name};`}&nbsp;\n                    </Link>\n                  ))}\n                {selectedArtistConnections.length -\n                  maxArtistsConnectionsToShow >\n                  0 && (\n                    <span>{`and ${selectedArtistConnections.length -\n                      maxArtistsConnectionsToShow\n                      } more`}</span>\n                  )}\n              </p>\n            </>\n          ) : (\n              <p>Hover over an artist to see details</p>\n            )}\n        </div>\n\n        <div className={styles.legend}>\n          {allGenres.map((genre) => (\n            <div key={genre} className={styles.legendGenre}>\n              <span\n                className={styles.legendGenreColor}\n                style={{ backgroundColor: genreColor[genre] }}\n              />\n              <span className={styles.legendGenreName}>{genre}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <section>\n        <p>\n          Most and least connected artists in the network were extracted and are\n          presented below. You may press on the artist to view their Spotify\n          profile.\n        </p>\n      </section>\n\n      <div className={styles.spaceSmall} />\n\n      <h3>5 most connected artists</h3>\n\n      <TopConnected\n        artists={mostConnectedArtists}\n        artistsConnections={artistsConnections}\n        maxArtistsConnections={10}\n      />\n\n      <div className={styles.space} />\n\n      <h3>5 least connected artists</h3>\n\n      <TopConnected\n        artists={leastConnectedArtists}\n        artistsConnections={artistsConnections}\n      />\n\n      <div className={styles.space} />\n      <div className={styles.spaceMedium} />\n\n      <section>\n        <p>\n          The initial assumption holds in the majority of cases related artists\n          are from the same genre. However, in some cases, it can be seen that\n          the clusters are split between different colours as many of the genres\n          are very similar/related to each other. As an example, the Hollywood\n          <span\n            className={styles.genreColor}\n            style={{ backgroundColor: genreColor[Genre.Hollywood] }}\n          />\n          and Broadway\n          <span\n            className={styles.genreColor}\n            style={{ backgroundColor: genreColor[Genre.Broadway] }}\n          />\n          genres create a distinct community together and the suggested related\n          artists could be from either genre.\n        </p>\n        <p>\n          Degree distributions for the discussed network of related artists are\n          presented below. It can be seen that they are quite similar to\n          distributions plotted for the artists by genres network. It can be\n          said that the network resembles something in-between a scale free and\n          a random network.\n        </p>\n      </section>\n\n      <img src={degreeDistribution} width={800} alt={\"degree distribution\"} />\n      <img\n        src={degreeDistributionLogLog}\n        width={800}\n        style={{ marginTop: 24 }}\n        alt={\"degree distribution (log log)\"}\n      />\n    </div>\n  );\n};\n\nfunction generateRelatedArtistsNetwork(): SigmaGraph {\n  const nodes = dataNodes.map((node, index) => {\n    const artistId = node[0] as string;\n\n    const [x, y] = dataPositions[artistId as keyof typeof dataPositions] as [\n      number,\n      number\n    ];\n\n    const size = normalize(dataNodeSize[index], 1, 4);\n\n    const color = dataNodeColor[index];\n\n    return {\n      id: artistId,\n      label: getArtistById(artistId).name,\n      x,\n      y,\n      size,\n      color,\n    };\n  });\n\n  const edges = (dataEdges as any).map(\n    (edge: [from: number, to: number, attributes: { genre: string }]) => {\n      const from = edge[0];\n      const to = edge[1];\n      const attributes = edge[2];\n\n      const color = \"rgba(0,0,0, 0.1)\";\n\n      return {\n        id: `${from}-${to}`,\n        source: from,\n        target: to,\n        label: attributes.genre,\n        color,\n      };\n    }\n  );\n\n  return {\n    nodes,\n    edges,\n  };\n}\n\nexport default RelatedArtists;\n","import { Sentiment } from \"../../interfaces/sentiments\";\nimport { getArtistById } from \"../artists\";\nimport sentimentsPop from \"./all_artists_sentiment_pop.json\";\nimport sentimentsRap from \"./all_artists_sentiment_rap.json\";\n\nexport enum SelectedGenre {\n  Pop,\n  Rap,\n}\n\nexport function getArtistsWithSentiment(genre: SelectedGenre) {\n  const artists = ((genre === SelectedGenre.Pop\n    ? sentimentsPop\n    : sentimentsRap) as unknown) as Sentiment[];\n\n  return artists.map(({ artist, happiness_average }) => ({\n    ...getArtistById(artist),\n    happiness_average,\n  }));\n}\n","import React from \"react\";\nimport styles from \"./styles.module.css\";\n\ninterface TitleProps {\n  readonly children: React.ReactNode;\n}\n\nconst Title: React.FC<TitleProps> = ({ children }) => {\n  return <div className={styles.container}>{children}</div>;\n};\n\nexport default Title;\n","export default __webpack_public_path__ + \"static/media/popularities_normal.1de4143b.svg\";","export default __webpack_public_path__ + \"static/media/genres.74d415dc.svg\";","import React from \"react\";\nimport styles from \"./styles.module.css\";\n\nimport popularities from \"./popularities_normal.svg\";\nimport genres from \"./genres.svg\";\n\nconst Artists: React.FC = () => {\n  return (\n    <div className={styles.container}>\n      <section>\n        <p>\n          There are 34 633 artists used in the analysis below. Each of the\n          artist is identified by the following attributes:\n        </p>\n        <ol className={styles.artistAttributes}>\n          <li>\n            <i>id</i> - the Spotify ID for the artist\n          </li>\n          <li>\n            <i>name</i> - the name of the artist\n          </li>\n          <li>\n            <i>popularity</i> - the popularity of the artist, a value between 0\n            and 100, with 100 being the most popular. The artist’s popularity\n            depends on the popularity of all the artist’s tracks.\n          </li>\n          <li>\n            <i>followers</i> - the total number of artist's followers\n          </li>\n          <li>\n            <i>genres</i> - a list of the genres the artist is associated with\n          </li>\n        </ol>\n      </section>\n\n      <section>\n        <b>Popularities</b>\n        <p>\n          Based on calculations it was found that the average popularity is\n          equal to 47.96 and the standard deviation of popularities is equal to\n          14. The figure below shows the distribution of artists' popularities.\n          It seems that the distribution partially resembles a Gaussian\n          distribution. For the sake of comparison a normal distribution with\n          the aforementioned parameters is plotted in a red color.\n        </p>\n        <img src={popularities} width={800} alt={\"popularities\"} />\n      </section>\n\n      <section>\n        <b>Genres</b>\n        <p>\n          It was found that there are 3301 genres among all artists in the data\n          set. To find which ones are more popular or tend to have more artists\n          involved a histogram of genres was plotted below. It seems that the\n          genres with the highest number of artists include different variations\n          of rock such as rock, hard rock, pub rock, stoner rock, but also dirty\n          south rap, dancehall, glitchcore or reggae fusion. Among genres with\n          less artists there are gospel blues, jewish hip hop, israeli trap,\n          finnish classical, folk rock italiano. It makes a lot of sense as\n          these genres seem to be more specialized or niche and they are often\n          subgenres of more popular genres.\n        </p>\n      </section>\n\n      <img\n        src={genres}\n        width={1100}\n        height={850}\n        style={{ marginTop: \"-200px\", marginBottom: \"32px\" }}\n        alt={\"genres\"}\n      />\n    </div>\n  );\n};\n\nexport default Artists;\n","export default __webpack_public_path__ + \"static/media/pop_frequency.c7dfa24e.svg\";","export default __webpack_public_path__ + \"static/media/rap_frequency.f89b0d7f.svg\";","import { SentimentArtist } from \"../../interfaces/artists\";\n\nexport const happiestPopArtists: SentimentArtist[] = [\n    {\n      id: \"7giUHu5pv6YTZgSkxxCcgh\",\n      name: \"Edward Sharpe & The Magnetic Zeros\",\n      happiness_rating: 6.058209,\n      image: \"https://i.scdn.co/image/940a038e44f6f1659066341a08139b7846a5d78b\",\n    },\n    {\n      id: \"0W7wIkmxoGQbnZYn2z2sLj\",\n      name: \"Brandon Heath\",\n      happiness_rating: 6.021335,\n      image: \"https://i.scdn.co/image/1e3f427b4858961e2d4c645b767466d1c6168a46\",\n    },\n    {\n      id: \"107CG0UhUl9GJnPwF83N63\",\n      name: \"UPPERROOM\",\n      happiness_rating: 5.998841,\n      image: \"https://i.scdn.co/image/e4a3c2543029b6ab9450cb86339b5fa2fb6ac13a\",\n    },\n    {\n      id: \"3LoDhoZo5Mkue9sAuj1KHb\",\n      name: \"VOUS Worship\",\n      happiness_rating: 5.982957,\n      image: \"https://i.scdn.co/image/5954f4246e95b5c76727905a65c209188736c4fb\",\n    },\n    {\n      id: \"7MCV4p3QmcYDMTfiE0ZWMD\",\n      name: \"Elle Limebear\",\n      happiness_rating: 5.978038,\n      image: \"https://i.scdn.co/image/a7a8cbe9a6d99024c05ac56dc0e1f4b424950746\",\n    },\n  ];\n  \n  export const happiestRapArtists: SentimentArtist[] = [\n    {\n      id: \"3v3clM1KQgVfpPjKJFPAmx\",\n      name: \"Shop Boyz\",\n      happiness_rating: 5.913729,\n      image: \"https://i.scdn.co/image/83b6693f32de9d7ef0e1888cac2717eaa4bb053d\",\n    },\n    {\n      id: \"5IcGbIAgdns0R5EJKHMjCQ\",\n      name: \"LOCASH\",\n      happiness_rating: 5.895319,\n      image: \"https://i.scdn.co/image/d472ce9f0d2b3c84a39e9517f208bc1b63632d2c\",\n    },\n    {\n      id: \"396Kh0m4wGUvcMUULw71yi\",\n      name: \"Zapp\",\n      happiness_rating: 5.858586,\n      image: \"https://i.scdn.co/image/35fa2223a5d9586a8fcb820c05f8d8468d52fa7a\",\n    },\n    {\n      id: \"2P3cjUru4H3fhSXXNxE9kA\",\n      name: \"Blackstreet\",\n      happiness_rating: 5.805812,\n      image: \"https://i.scdn.co/image/4088b0da4a7f2c6169b49d5b2c8b9d4332d66095\",\n    },\n    {\n      id: \"57vWImR43h4CaDao012Ofp\",\n      name: \"Steve Lacy\",\n      happiness_rating: 5.797468,\n      image: \"https://i.scdn.co/image/a0a5eb30dd56ed9db5fa6d11b23f653ea785f88f\",\n    },\n  ];","import { SentimentArtist } from \"../../interfaces/artists\";\n\nexport const saddestPopArtists: SentimentArtist[] = [\n    {\n      id: \"0Wnd6L0qEnk8jiCIHrWXaC\",\n      name: \"Kudai\",\n      happiness_rating: 4.920501,\n      image: \"https://i.scdn.co/image/111c5a5e281175d44c81ee4da164a4ae5175f93f\",\n    },\n    {\n      id: \"7FZj349hdLfD6qzXkJLuAh\",\n      name: \"La Quinta Estacion\",\n      happiness_rating: 4.935087,\n      image: \"https://i.scdn.co/image/ab67616d00001e021daaff00746344ca90245833\",\n    },\n    {\n      id: \"0TeVa4xdLB8vdzjsvKH6Ri\",\n      name: \"Anahí\",\n      happiness_rating: 4.947755,\n      image: \"https://i.scdn.co/image/25644400f6f4895f24c2fa40cda1ad2db6c697cd\",\n    },\n    {\n      id: \"1snhtMLeb2DYoMOcVbb8iB\",\n      name: \"Kenshi Yonezu\",\n      happiness_rating: 4.950943,\n      image: \"https://i.scdn.co/image/c41ffaee72192a3e0de965b4c4df030ea31b68f9\",\n    },\n    {\n      id: \"1ieluXFoq2RRxMXZIQksTz\",\n      name: \"Gesu No Kiwami Otome\",\n      happiness_rating: 4.955568,\n      image: \"https://i.scdn.co/image/2d4fee72c312245289a2e02532c62c1d61030afc\",\n    },\n  ];\n  \n  export const saddestRapArtists: SentimentArtist[] = [\n    {\n      id: \"18o5O97u7HznXeLoyUlEc1\",\n      name: \"UNOFROMPLUTO\",\n      happiness_rating: 4.731024,\n      image: \"https://i.scdn.co/image/44cb04cde4a8783caaecaa1ec3a88bf5fb73a9fb\",\n    },\n    {\n      id: \"02BMPJbCTip0cSHomYl07g\",\n      name: \"XATASHI\",\n      happiness_rating: 4.886517,\n      image: \"https://i.scdn.co/image/f46f864f79252befeacded149b9622d30faba619\",\n    },\n    {\n      id: \"1pJZdZ0ObCPyhChzQzA24i\",\n      name: \"T-Rock\",\n      happiness_rating: 4.9408186,\n      image: \"https://i.scdn.co/image/ab67616d00001e028abb5c196a2042d4d3a60a62\",\n    },\n    {\n      id: \"0ekK352BUEA00cnbGeOLkO\",\n      name: \"XZARKHAN\",\n      happiness_rating: 4.951548,\n      image: \"https://i.scdn.co/image/daaec3bcf0cc99ad45ce2506acf517af4868a006\",\n    },\n    {\n      id: \"3m9W4fgKhCj5yttpKEAyse\",\n      name: \"$ubjectz\",\n      happiness_rating: 4.953729,\n      image: \"https://i.scdn.co/image/527d6a704639cda4361d30cbcb964da15bfbbafa\",\n    },\n  ];","import React, { useMemo, useState } from \"react\";\nimport styles from \"./styles.module.css\";\nimport { Artist } from \"../../interfaces/artists\";\nimport { getArtistsWithSentiment, SelectedGenre } from \"../../data/Sentiment\";\nimport Link from \"../Link\";\nimport popSentiment from \"./pop_frequency.svg\";\nimport rapSentiment from \"./rap_frequency.svg\";\nimport TopConnected from \"../ArtistsByGenres/TopConnected\";\nimport {\n  happiestPopArtists,\n  happiestRapArtists,\n} from \"../../data/Sentiment/happiest\";\nimport {\n  saddestPopArtists,\n  saddestRapArtists,\n} from \"../../data/Sentiment/sadest\";\n\nconst Sentiments: React.FC = () => {\n  const [text, setText] = useState<string>();\n\n  const [selectedGenre, setSelectedGenre] = useState<SelectedGenre>(\n    SelectedGenre.Pop\n  );\n\n  const [selectedArtist, setSelectedArtist] = useState<\n    Artist & { happiness_average: number }\n  >();\n\n  const allArtists = useMemo(() => getArtistsWithSentiment(selectedGenre), [\n    selectedGenre,\n  ]);\n\n  const happiestArtists =\n    selectedGenre === SelectedGenre.Pop\n      ? happiestPopArtists\n      : happiestRapArtists;\n\n  const saddestArtists =\n    selectedGenre === SelectedGenre.Pop ? saddestPopArtists : saddestRapArtists;\n\n  const filteredArtists = useMemo(() => {\n    if (text) {\n      return allArtists.filter((artist) =>\n        artist.name.toLowerCase().includes(text.toLowerCase())\n      );\n    } else {\n      return allArtists;\n    }\n  }, [text, allArtists]);\n\n  return (\n    <div className={styles.container}>\n      <section>\n        <p>\n          As noticed above, the word clouds for Pop and Rap genres have a very\n          different vibe. The sentiment analysis of the most frequent words from\n          the word clouds was performed in order to have a quantifiable value\n          that reflects the happiness of each of the two genres. As expected,\n          the Pop genre has a higher happiness rating compared to the Rap genre.\n        </p>\n      </section>\n\n      <section className={styles.happinessRating}>\n        <div className={styles.pop}>\n          <span>Pop: 6.16</span>\n          <img\n            src={\n              \"https://images.unsplash.com/photo-1540723006396-c514409a0f9f?crop=entropy&cs=tinysrgb&fit=crop&fm=jpg&h=128&ixlib=rb-1.2.1&q=80&w=400\"\n            }\n            alt=\"pop\"\n          />\n        </div>\n        <div className={styles.rap}>\n          <span>Rap: 3.91</span>\n          <img\n            src={\n              \"https://images.unsplash.com/photo-1558258021-971dd2148be5?crop=entropy&cs=tinysrgb&fit=crop&fm=jpg&h=128&ixlib=rb-1.2.1&q=80&w=400\"\n            }\n            alt=\"rap\"\n          />\n        </div>\n      </section>\n\n      <section>\n        <p style={{ textAlign: \"center\", marginTop: \"-24px\" }}>\n          Happiness rating of Pop and Rap word clouds\n        </p>\n      </section>\n\n      <section>\n        <p>\n          To further analyze the general trends of the genres, the average\n          happiness rating is computed based on the lyrics of the top songs of\n          all artists.\n        </p>\n      </section>\n\n      <img\n        src={popSentiment}\n        width={800}\n        style={{ margin: \"0 auto\", marginTop: 24, display: \"block\" }}\n        alt={\"degree distribution (log log)\"}\n      />\n\n      <img\n        src={rapSentiment}\n        width={800}\n        style={{ margin: \"0 auto\", marginTop: 24, display: \"block\" }}\n        alt={\"degree distribution (log log)\"}\n      />\n\n      <div className={styles.space} />\n      <section>\n        <p>\n          The first thing to point out is that both genres are in a quite short\n          interval 5.12, 5.90 on the happiness scale. This is because all words\n          in songs count towards the happiness average which means that neutral\n          words are likely the most common. Very happy or sad words are less\n          common and have less weight in the happiness average.\n        </p>\n      </section>\n\n      <p>Please select a genre to see the happiest and saddest artists:</p>\n\n      <button\n        className={\n          selectedGenre === SelectedGenre.Pop\n            ? styles.btn_green\n            : styles.btn_white\n        }\n        onClick={() => setSelectedGenre(SelectedGenre.Pop)}\n      >\n        Pop\n      </button>\n      <button\n        className={\n          selectedGenre === SelectedGenre.Rap\n            ? styles.btn_green\n            : styles.btn_white\n        }\n        style={{ marginRight: 0 }}\n        onClick={() => setSelectedGenre(SelectedGenre.Rap)}\n      >\n        Rap\n      </button>\n\n      <div className={styles.space} />\n\n      <h3>\n        5 happiest artists in{\" \"}\n        {selectedGenre === SelectedGenre.Pop ? \"Pop\" : \"Rap\"}\n      </h3>\n\n      <TopConnected forSentimentArtists artists={happiestArtists} />\n\n      <div className={styles.space} />\n\n      <h3>\n        5 saddest artists in{\" \"}\n        {selectedGenre === SelectedGenre.Pop ? \"Pop\" : \"Rap\"}\n      </h3>\n\n      <TopConnected forSentimentArtists artists={saddestArtists} />\n\n      <div className={styles.space} />\n\n      <p>\n        Check below what is the happiness rating of your favorite artist from{\" \"}\n        {selectedGenre === SelectedGenre.Pop ? \"Pop\" : \"Rap\"}:\n      </p>\n\n      <div className={styles.content}>\n        <div className={styles.artists}>\n          <input\n            type=\"text\"\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            placeholder={\"Search for an artist...\"}\n          />\n\n          <div className={styles.artistsList}>\n            <ul>\n              {filteredArtists.map((artist) => {\n                return (\n                  <li\n                    key={`sentiments-${artist.id}`}\n                    onClick={() => setSelectedArtist(artist)}\n                  >\n                    {artist.name}\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </div>\n\n        <div className={styles.selectedArtist}>\n          {selectedArtist ? (\n            <>\n              <h3>Selected artist</h3>\n\n              <p>\n                <b>Name</b>:{\" \"}\n                <Link\n                  url={`https://open.spotify.com/artist/${selectedArtist.id}`}\n                >\n                  {selectedArtist.name}\n                </Link>\n              </p>\n              <p>\n                <b>Happiness average</b>: {selectedArtist.happiness_average}\n              </p>\n              <p>\n                <b>Popularity</b>: {selectedArtist.popularity}\n              </p>\n              <p>\n                <b>Followers</b>: {selectedArtist.followers.total}\n              </p>\n              <p>\n                <b>Genres</b>: {selectedArtist.genres.join(\", \")}\n              </p>\n            </>\n          ) : (\n            <p>\n              Please select an artist on the left to see their happiness rating.\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Sentiments;\n","import React from \"react\";\nimport styles from \"./App.module.css\";\nimport ArtistsByGenres from \"./components/ArtistsByGenres\";\nimport DataSets from \"./components/DataSets\";\nimport Introduction from \"./components/Introduction\";\nimport TFTR from \"./components/TFTR\";\nimport TFIDF from \"./components/TFIDF\";\nimport RelatedArtists from \"./components/RelatedArtists\";\nimport Title from \"./components/Title\";\nimport joinCls from \"./helpers/joinClasses\";\nimport Artists from \"./components/Artists\";\nimport Sentiments from \"./components/Sentiments\";\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <h1>Social Graphs</h1>\n      <h3>Assignment 2</h3>\n      <ul>\n        <li>Nicolae Popovici</li>\n        <li>Benjamin Starostka</li>\n        <li>Bartosz Selwesiuk</li>\n      </ul>\n\n      <div className={joinCls(styles.introduction, styles.section)}>\n        <Title>Introduction</Title>\n        <Introduction />\n      </div>\n\n      <div className={styles.section}>\n        <Title>Artists</Title>\n        <Artists />\n      </div>\n\n      <div className={styles.section}>\n        <Title>Artists network based on genres</Title>\n        <ArtistsByGenres />\n      </div>\n\n      <div className={styles.section}>\n        <Title>Related artists network</Title>\n        <RelatedArtists />\n      </div>\n\n      <div className={styles.section}>\n        <Title>TF-TR</Title>\n        <TFTR />\n      </div>\n\n      <div className={styles.section}>\n        <Title>TF-IDF</Title>\n        <TFIDF />\n      </div>\n\n      <div className={styles.section}>\n        <Title>Sentiment analysis</Title>\n        <Sentiments />\n      </div>\n\n      <div className={styles.section} id=\"explainer-notebook-data-sets\">\n        <Title>Explainer notebook and data sets</Title>\n        <DataSets />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}